<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>coldwinter的学习笔记</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://coldwinter2.github.io/"/>
  <updated>2016-11-28T02:55:46.000Z</updated>
  <id>http://coldwinter2.github.io/</id>
  
  <author>
    <name>coldwinter</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小猫钓鱼</title>
    <link href="http://coldwinter2.github.io/2016/11/cat-fishing/"/>
    <id>http://coldwinter2.github.io/2016/11/cat-fishing/</id>
    <published>2016-11-28T02:32:00.000Z</published>
    <updated>2016-11-28T02:55:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>有一天，猫妈妈带着小猫到河边去钓鱼。</p>
<p>一只蜻蜓飞来了，这只蜻蜓可真漂亮呀，小猫越看越喜欢，于是放下鱼竿去捉蜻蜓。蜻蜓飞走了，小猫空手回到河边。一看，妈妈已经钓到了一条大鱼。 　　</p>
<p>小猫想：我也要钓一条大鱼，就又拿起鱼竿钓鱼。</p>
<p>不一会儿，一只蝴蝶飞来了，这只蝴蝶可真漂亮呀，小猫越看越喜欢，于是放下鱼竿，又去捉蝴蝶。蝴蝶没捉到，小猫又空着手回到河边。一看，妈妈又钓了一条大鱼。 　　</p>
<p>小猫对妈妈说：“我怎么就钓不到鱼呢！”</p>
<p>妈妈说：“钓鱼要一心一意，你一会儿捉蜻蜓，一会儿捉蝴蝶，当然钓不到鱼了。”</p>
<p>小猫听了妈妈的话，一心一意地钓鱼，终于钓到了一条大鱼。</p>
<p>其实这么简单的道理，却有很多人不动。做游戏不专心朝着一点做，非要左冲右突，结果最终什么都没做成。有些SB策划和产品完全意识不到这一点。<br>正所谓 <strong>不怕虎一样的对手，就怕猪一样的队友</strong>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一天，猫妈妈带着小猫到河边去钓鱼。&lt;/p&gt;
&lt;p&gt;一只蜻蜓飞来了，这只蜻蜓可真漂亮呀，小猫越看越喜欢，于是放下鱼竿去捉蜻蜓。蜻蜓飞走了，小猫空手回到河边。一看，妈妈已经钓到了一条大鱼。 　　&lt;/p&gt;
&lt;p&gt;小猫想：我也要钓一条大鱼，就又拿起鱼竿钓鱼。&lt;/p&gt;
&lt;p&gt;不一会
    
    </summary>
    
      <category term="随笔" scheme="http://coldwinter2.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="游戏人生" scheme="http://coldwinter2.github.io/tags/%E6%B8%B8%E6%88%8F%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>Express + socket.io 聊天程序</title>
    <link href="http://coldwinter2.github.io/2016/11/websocket/"/>
    <id>http://coldwinter2.github.io/2016/11/websocket/</id>
    <published>2016-11-17T05:44:59.000Z</published>
    <updated>2016-11-17T05:45:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h3><ol>
<li>下载安装node.js(自行百度）</li>
<li>安装npm（自行百度）</li>
<li>创建工程目录 <code>mkdir webSocket</code> 并且切换到该目录</li>
<li>在webSocket下创建npm工程 <code>npm init</code> 按照提示完成</li>
<li>安装express <code>npm install express</code> (注意，此处非全局安装)</li>
<li>安装socket.io <code>npm install socket.io</code> (同上)</li>
<li>创建web目录www <code>mkdir www</code></li>
<li>创建js目录 <code>mkdir www/js</code> （这一步在本文内无用，是用来放客户端js代码的)</li>
<li>在js目录中安装socket.io.js,这个文件在 <code>node\_modules/socket.io\_client</code> 内</li>
<li>创建相应的 <code>index.js</code>、<code>www/index.html</code>文件</li>
</ol>
<h3 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h3><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><p>先帖代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line">server = app.listen(<span class="number">8000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</div><div class="line"></span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'服务器启动:http://localhost:8000'</span>);</div><div class="line">&#125;);</div><div class="line">io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>).listen(server);</div><div class="line">	</div><div class="line">app.use(<span class="string">'/'</span>,express.static(__dirname + <span class="string">'/www'</span>));</div><div class="line">	</div><div class="line"><span class="comment">//在线用户</span></div><div class="line"><span class="keyword">var</span> onlineUsers = &#123;&#125;;</div><div class="line"><span class="comment">//当前在线人数</span></div><div class="line"><span class="keyword">var</span> onlineCount = <span class="number">0</span>;</div><div class="line">	</div><div class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</div><div class="line">	</div><div class="line">	<span class="built_in">console</span>.log(socket.id);</div><div class="line">	<span class="keyword">if</span>(!onlineUsers.hasOwnProperty(socket.id)) &#123;</div><div class="line">		onlineUsers[socket.id] = socket;</div><div class="line">		<span class="comment">//在线人数+1</span></div><div class="line">		onlineCount++;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	socket.emit(<span class="string">'login'</span>,&#123;<span class="attr">user</span>:socket.id, <span class="attr">count</span>:onlineCount&#125;);</div><div class="line">	</div><div class="line">	io.emit(<span class="string">'enter'</span>, &#123;<span class="attr">count</span>:onlineCount, <span class="attr">user</span>:socket.id&#125;);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'用户'</span>+socket.id + <span class="string">" 加入的房间，当前在线人数:"</span> + onlineCount);</div><div class="line">	<span class="comment">//监听用户退出</span></div><div class="line">	socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</div><div class="line">	</span>&#123;</div><div class="line">		<span class="comment">//将退出的用户从在线列表中删除</span></div><div class="line">		<span class="keyword">if</span>(onlineUsers.hasOwnProperty(socket.id)) &#123;</div><div class="line">			<span class="comment">//退出用户的信息</span></div><div class="line">			<span class="comment">//删除</span></div><div class="line">			<span class="keyword">delete</span> onlineUsers[socket.id];</div><div class="line">			<span class="comment">//在线人数-1</span></div><div class="line">			onlineCount--;</div><div class="line">	</div><div class="line">			<span class="comment">//向所有客户端广播用户退出</span></div><div class="line">			io.emit(<span class="string">'logout'</span>, &#123; <span class="attr">count</span>:onlineCount, <span class="attr">user</span>:socket.id&#125;);</div><div class="line">			<span class="comment">// console.log(socket.id+'退出了聊天室');</span></div><div class="line">		&#125;</div><div class="line">        <span class="built_in">console</span>.log(socket.id +<span class="string">'退出了房间,当前房间人数:'</span> + onlineCount);</div><div class="line">	&#125;);</div><div class="line">	</div><div class="line">	<span class="comment">//监听用户发布聊天内容</span></div><div class="line">	socket.on(<span class="string">'msg'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">		<span class="comment">//向所有客户端广播发布的消息</span></div><div class="line">		io.emit(<span class="string">'msg'</span>, &#123;<span class="attr">user</span>:socket.id, <span class="attr">msg</span>:obj,<span class="attr">count</span>:onlineCount&#125;);</div><div class="line">		<span class="built_in">console</span>.log(socket.id+<span class="string">'说：'</span>+obj);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><p>不同于网上其它的例子，这里直接用express的对象启动监听，就可以返回一个server对象。<br>如果希望监听在逻辑的最后执行，可以先执行创建server(<code>createServer</code>)，再监听。<br>另外，选择8000端口，是因为，在mac下，访问80端口需要相应的权限，因此避免用此端口可以免去开发中的一些麻烦。等正式环境再做调整。</p>
<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>客户端的代码结合的jquery来使用，我只帖重点部分。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;script src="socket.io/socket.io.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;script src="js/jquery-3.1.1.min.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;script&gt;</div><div class="line"></div><div class="line"></div><div class="line">    var user_id = '';</div><div class="line"></div><div class="line"></div><div class="line">    $(document).ready(function()&#123;</div><div class="line"></div><div class="line">        var socket=io.connect();//与服务器进行连接</div><div class="line"></div><div class="line">        $("#send").click(function()&#123;</div><div class="line">            var data = $("#text").val();</div><div class="line">            socket.emit('msg', data );</div><div class="line">            $("#msg").val( $("#msg").val() + "\n我:" + data ); </div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        socket.on('enter',function(data)&#123;</div><div class="line">            </div><div class="line">            $("#online").val('当前在线人数:' + data.count);</div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        socket.on('logout',function(data)&#123;</div><div class="line">            $("#online").val('当前在线人数:' + data.count);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        socket.on('login',function(data)&#123;</div><div class="line">            user_id = data.user;</div><div class="line">            $("#online").val('当前在线人数:' + data.count);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        socket.on('msg',function(data)&#123;</div><div class="line">            $("#online").val('当前在线人数:' + data.count);</div><div class="line">            if(data.user == user_id) return;</div><div class="line">            $("#msg").val( $("#msg").val() + "\n" + data.user +':'+data.msg);</div><div class="line"></div><div class="line"></div><div class="line">        &#125;)</div><div class="line"></div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    &lt;/script&gt;</div><div class="line">    ......</div></pre></td></tr></table></figure>
<h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><p>引入的js文件 <code>socket.io/socket.io.js</code> 这个是由服务器创建的访问，我们不必真的创建一个目录来存放一个真实的socket.io.js文件，当然，如果你的站点动静分离，或者有特别的需求，可以从网站下载相应的文件，放在相应的目录下提供访问，也是完全没有问题的。</p>
<p>具体socket的绑定事件，可以从<a href="http://socket.io">socket.io官方</a>的文档里找到相应的内容。</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>本文只是为了贴一段代码，做一个备忘。这部分内容还会继续深入学习，这个笔记很持续更新一段时间，直到我搞清楚webSocket为止。</p>
<p>下面附上我自己的各组件版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">node.js    v6.9.1</div><div class="line">socket.io  1.5.1</div><div class="line">socket.io_client  1.4.5</div><div class="line">express    4.14.0</div></pre></td></tr></table></figure>
<p>踩过此坑，特此记录</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基础环境&quot;&gt;&lt;a href=&quot;#基础环境&quot; class=&quot;headerlink&quot; title=&quot;基础环境&quot;&gt;&lt;/a&gt;基础环境&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;下载安装node.js(自行百度）&lt;/li&gt;
&lt;li&gt;安装npm（自行百度）&lt;/li&gt;
&lt;li&gt;创建工程目录 &lt;
    
    </summary>
    
      <category term="node.js" scheme="http://coldwinter2.github.io/categories/node-js/"/>
    
      <category term="webSocket" scheme="http://coldwinter2.github.io/categories/node-js/webSocket/"/>
    
    
      <category term="webSocket" scheme="http://coldwinter2.github.io/tags/webSocket/"/>
    
      <category term="socket.io" scheme="http://coldwinter2.github.io/tags/socket-io/"/>
    
  </entry>
  
  <entry>
    <title>Electron 安装</title>
    <link href="http://coldwinter2.github.io/2016/11/electron-setup/"/>
    <id>http://coldwinter2.github.io/2016/11/electron-setup/</id>
    <published>2016-11-12T04:12:45.000Z</published>
    <updated>2016-11-14T01:38:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;对于node.js的各种模块安装，最头疼的莫过于下载了。安装包体积巨大，GFW功能强大，服务器在国外，下载成功的几率很小。因此Electron的安装也是很麻烦的。</p>
<h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>1、在安装步骤执行到 <code>&gt; node install.js</code> 时，按ctrl+c中断过程<br>2、阅读install.js的源代码<br>3、找到使用本地缓存的逻辑<br>4、手动下载zip文件，建立本地缓存，之后使用本地文件进行安装</p>
<h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><p>1、下载所需的zip包，我在mac环境下的下载路径是</p>
<blockquote>
<p><a href="https://github.com/electron/electron/releases/download/v1.4.5/electron-v1.4.5-darwin-x64.zip">https://github.com/electron/electron/releases/download/v1.4.5/electron-v1.4.5-darwin-x64.zip</a></p>
</blockquote>
<p>2、本地缓存目录为</p>
<blockquote>
<p>~/.electron/electron-v1.4.5-darwin-x64.zip</p>
</blockquote>
<p>3、手动下载的zip包放到缓存目录所在位置。</p>
<p>4、重新执行 <code>npm install -g electron</code> 即可</p>
<h3 id="授人以渔"><a href="#授人以渔" class="headerlink" title="授人以渔"></a>授人以渔</h3><p>上面的下载地址和缓存目录是通过阅读install.js脚本，尝试执行并打印部分变量得到的。<br>对于很多其它的使用npm安装的功能模块，都可以通过这个方法，解决下载问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;对于node.js的各种模块安装，最头疼的莫过于下载了。安装包体积巨大，GFW功能强大，服务器在国外，下载成功的几率很小。因此Electron的安装也是很麻烦的。&lt;/p&gt;
&lt;h3 id=&quot;解决方案：&quot;&gt;&lt;a href=&quot;#解决
    
    </summary>
    
      <category term="Electron" scheme="http://coldwinter2.github.io/categories/Electron/"/>
    
    
      <category term="Electron" scheme="http://coldwinter2.github.io/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>Electron 简介</title>
    <link href="http://coldwinter2.github.io/2016/11/electron-intr/"/>
    <id>http://coldwinter2.github.io/2016/11/electron-intr/</id>
    <published>2016-11-12T04:10:20.000Z</published>
    <updated>2016-11-14T01:38:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://electron.atom.io/">Electron</a>是一个基于node.js的跨平台桌面应用组件（暂且称之为组件，对node.js只是初学，不知道标准的称呼是什么）。</p>
<p>它最大的有点在于可以使用JavaScript 和 HTML来构建跨平台的桌面应用。</p>
<p>我们常见的文本编辑器 atom，vscode和知名的游戏引擎cocos2dx推出的游戏编辑器cocos creator就是基于<a href="http://electron.atom.io/">Electron</a>开发的。</p>
<p>这直接降低了桌面应用开发的难度，并且兼容许多js版本的功能，尤其对于游戏开发，十分友好。</p>
<p>由于近期工具开发的需要，接触了node.js开发，后续会有相关的学习笔记，来整理学习的过程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://electron.atom.io/&quot;&gt;Electron&lt;/a&gt;是一个基于node.js的跨平台桌面应用组件（暂且称之为组件，对node.js只是初学，不知道标准的称呼是什么）。&lt;/p&gt;
&lt;p&gt;它最大的有点在于可以使用JavaScript 和 
    
    </summary>
    
      <category term="Electron" scheme="http://coldwinter2.github.io/categories/Electron/"/>
    
    
      <category term="Electron" scheme="http://coldwinter2.github.io/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>风格修改</title>
    <link href="http://coldwinter2.github.io/2016/11/style/"/>
    <id>http://coldwinter2.github.io/2016/11/style/</id>
    <published>2016-11-10T09:52:52.000Z</published>
    <updated>2016-11-10T09:53:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="新的风格"><a href="#新的风格" class="headerlink" title="新的风格"></a>新的风格</h3><h4 id="修改了一次标题风格"><a href="#修改了一次标题风格" class="headerlink" title="修改了一次标题风格"></a>修改了一次标题风格</h4><p>背景改为了黑色，与前景色互换了，这样更符合程序员的习惯，而且看多了，也不会觉得累。</p>
<p>按照管理，应当有一些仪式性的东西。比如，helloworld</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="string">"Hello Coldwinter's blog"</span>);</div></pre></td></tr></table></figure>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">'Hello Coldwinter'</span>s blog<span class="string">')</span></div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"Hello Coldwinter's blog"</span>);</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> <span class="string">"Hello Coldwinter's blog"</span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>各种代码的高亮</p>
</blockquote>
<ol>
<li>表格的支持</li>
<li>有序的</li>
</ol>
<ul>
<li>无序的</li>
<li>以及不知道是什么的</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;新的风格&quot;&gt;&lt;a href=&quot;#新的风格&quot; class=&quot;headerlink&quot; title=&quot;新的风格&quot;&gt;&lt;/a&gt;新的风格&lt;/h3&gt;&lt;h4 id=&quot;修改了一次标题风格&quot;&gt;&lt;a href=&quot;#修改了一次标题风格&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
    
      <category term="日记" scheme="http://coldwinter2.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>第一篇文章</title>
    <link href="http://coldwinter2.github.io/2016/11/hello-world/"/>
    <id>http://coldwinter2.github.io/2016/11/hello-world/</id>
    <published>2016-11-10T09:50:52.000Z</published>
    <updated>2016-11-14T01:38:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直想坚持写博客，但是结果总是各种站点被关停，因此很久都没有好好写过博客。</p>
<p>最近终于下定决心，在github上创建了自己的博客站点，以后会经常来更新点东西。权当自己的日常笔记。</p>
<p>希望有兴趣的朋友来坐坐。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直想坚持写博客，但是结果总是各种站点被关停，因此很久都没有好好写过博客。&lt;/p&gt;
&lt;p&gt;最近终于下定决心，在github上创建了自己的博客站点，以后会经常来更新点东西。权当自己的日常笔记。&lt;/p&gt;
&lt;p&gt;希望有兴趣的朋友来坐坐。&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
