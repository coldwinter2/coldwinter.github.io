<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>coldwinter的学习笔记</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://coldwinter2.github.io/"/>
  <updated>2016-11-14T11:17:21.000Z</updated>
  <id>http://coldwinter2.github.io/</id>
  
  <author>
    <name>coldwinter</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Express + socket.io 聊天程序踩坑实录</title>
    <link href="http://coldwinter2.github.io/2016/11/websocket/"/>
    <id>http://coldwinter2.github.io/2016/11/websocket/</id>
    <published>2016-11-14T05:20:13.000Z</published>
    <updated>2016-11-14T11:17:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;本文其实没有其实没有很特别的内容，只不过是写一个简单的node.js下express+socket.io的基础示例。不过就是这样一个网上随处都可以找到的示例，却让我踩出了一个不大不小的坑。教程有很多，我随便贴一些连接上来，基本写法都一样，大部分应当都是复制粘贴来的。例如：</p>
<p><a href="http://www.open-open.com/lib/view/open1402479198587.html" target="_blank" rel="external">使用Node.js+Socket.IO搭建WebSocket实时应用</a></p>
<p><a href="http://www.cnblogs.com/Wayou/p/hichat_built_with_nodejs_socket.html" target="_blank" rel="external">Node.js + Web Socket 打造即时聊天程序嗨聊</a></p>
<p><a href="http://www.tuicool.com/articles/fmeQVjZ" target="_blank" rel="external">NodeJS+Express+Socket.io的一个简单例子</a></p>
<p>下面，我就以一个聊天程序来说明一下踩坑的过程。</p>
<ol>
<li>下载安装node.js(自行百度）</li>
<li>安装npm（自行百度）</li>
<li>创建工程目录 <code>mkdir webSocket</code> 并且切换到该目录</li>
<li>在webSocket下创建npm工程 <code>npm init</code> 按照提示完成</li>
<li>安装express <code>npm install express</code> (注意，此处非全局安装)</li>
<li>安装socket.io <code>npm install socket.io</code> (同上)</li>
<li>创建web目录www <code>mkdir www</code></li>
<li>创建js目录 <code>mkdir www/js</code> （这一步在本文内无用，是用来放客户端js代码的)</li>
<li>在js目录中安装socket.io.js,这个文件在 <code>node\_modules/socket.io\_client</code> 内</li>
<li>创建相应的 <code>index.js</code>、<code>www/index.html</code>文件</li>
</ol>
<p>OK，基本的环境搭建到此结束。下面开始踩坑。</p>
<h3 id="踩坑过程"><a href="#踩坑过程" class="headerlink" title="踩坑过程"></a>踩坑过程</h3><h4 id="1-Client端引用Socket-io-js的问题"><a href="#1-Client端引用Socket-io-js的问题" class="headerlink" title="1.Client端引用Socket.io.js的问题"></a>1.Client端引用Socket.io.js的问题</h4><p>首先说，socket.io不是一定要放在socket.io文件夹内的，几乎网上大部分教程，代码里都写着</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"socket.io/socket.io.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这让很多刚来入门的新人，以为，需要吧socket.io.js放在一个叫做socket.io的文件夹里，并且提供访问。其实是没必要的。<br>因为已经存在一个叫socket.io_client的包，在socket.io在创建的时候会自己注册一个socket.io的url访问，因此用户无需干预。</p>
<p>其实这个socket.io.js也可以放在任何位置，只要从<a href="http://socket.io/" target="_blank" rel="external">socket.io</a>下载对应的socket的独立js文件，就当做普通的js一样一用就可以了，无需了解服务端内部究竟干了什么。</p>
<p>然而很多人发现了，按照教程，socket.io怎么也无法连接成功。如果自己手动引入了别的socket.io.js而且打开浏览器的开发者工具，就会看到一个http请求 <a href="http://localhost:xxxx/socket.io/?EIO=xxxx" target="_blank" rel="external">http://localhost:xxxx/socket.io/?EIO=xxxx</a>  返回了404错误。由此很可能会联想到，和这个文件的路径有关。</p>
<p>其实这个错误和这个没关系，而和服务端的代码有关。<br>这就引出了教程中的第二个坑。</p>
<h4 id="2-服务端代码的坑"><a href="#2-服务端代码的坑" class="headerlink" title="2.服务端代码的坑"></a>2.服务端代码的坑</h4><p>和前面一个坑相比，这个才是正经的坑，上面那个只可能影响到一些喜欢深入思考的初学者，但是下面这个坑，绝对会影响到所有初学者。</p>
<p>含坑代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</div><div class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(http);</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">  res.sendfile(<span class="string">'index.html'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'a user connected'</span>);</div><div class="line">    </div><div class="line">  socket.on(<span class="string">'chat message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'message: '</span> + msg);</div><div class="line"></div><div class="line">    io.emit(<span class="string">'chat message'</span>, msg);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.set(<span class="string">'port'</span>, process.env.PORT || <span class="number">3000</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = http.listen(app.get(<span class="string">'port'</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'start at port:'</span> + server.address().port);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>我随便从前面的教程连接里摘出来的一段主要代码。<br>这段代码的坑在于，express是一个完整的http服务器框架，因此不再需要http这个库了。<br>在建立本地监听的过程中，不需要 <code>require(&#39;http&#39;).Server(app)</code> 这种写法了，直接调用express的listen方法就可以了，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line">server = app.listen(<span class="number">8000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'服务器启动'</span>);</div><div class="line">&#125;);</div><div class="line">io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>).listen(server);</div><div class="line"></div><div class="line"><span class="comment">// some other code</span></div></pre></td></tr></table></figure>
<p>如果使用http包来创建，则对应的socket.io的相关功能就没有了。</p>
<h3 id="踩坑分析"><a href="#踩坑分析" class="headerlink" title="踩坑分析"></a>踩坑分析</h3><p>其实这个坑，并不是原博文作者的问题，而是版本迭代问题。</p>
<p>要避免坑1，就要去阅读socket.io的api文档，里面写的很清楚，如果创建socket.io的时候没有带路径参数，默认创建在socket.io路径下，可以通过如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server,<span class="string">'js'</span>);</div></pre></td></tr></table></figure>
<p>这样就可以把 <code>&lt;script src=&quot;socket.io/socket.io.js&quot;&gt;&lt;/script&gt;</code> 换成 <code>&lt;script src=&quot;js/socket.io.js&quot;&gt;&lt;/script&gt;</code> 了</p>
<p>第二个坑，大概是express经过几个版本的迭代在创建上有一些变化。因为原博文没有说明<code>node.js</code> <code>socket.io</code>和<code>express</code>的版本。</p>
<p>所以写教程第一步就是说明当前环境，如果后续有人发现代码无法测试通过，可以先去找对应的版本试试</p>
<p>下面附上我自己的测试环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">node.js    v6.9.1</div><div class="line">socket.io  1.5.1</div><div class="line">socket.io_client  1.4.5</div><div class="line">express    4.14.0</div></pre></td></tr></table></figure>
<p>踩过此坑，特此记录</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;本文其实没有其实没有很特别的内容，只不过是写一个简单的node.js下express+soc
    
    </summary>
    
      <category term="node.js" scheme="http://coldwinter2.github.io/categories/node-js/"/>
    
      <category term="webSocket" scheme="http://coldwinter2.github.io/categories/node-js/webSocket/"/>
    
    
      <category term="webSocket" scheme="http://coldwinter2.github.io/tags/webSocket/"/>
    
      <category term="socket.io" scheme="http://coldwinter2.github.io/tags/socket-io/"/>
    
  </entry>
  
  <entry>
    <title>Electron 安装</title>
    <link href="http://coldwinter2.github.io/2016/11/electron-setup/"/>
    <id>http://coldwinter2.github.io/2016/11/electron-setup/</id>
    <published>2016-11-12T04:12:45.000Z</published>
    <updated>2016-11-14T01:38:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;对于node.js的各种模块安装，最头疼的莫过于下载了。安装包体积巨大，GFW功能强大，服务器在国外，下载成功的几率很小。因此Electron的安装也是很麻烦的。</p>
<h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>1、在安装步骤执行到 <code>&gt; node install.js</code> 时，按ctrl+c中断过程<br>2、阅读install.js的源代码<br>3、找到使用本地缓存的逻辑<br>4、手动下载zip文件，建立本地缓存，之后使用本地文件进行安装</p>
<h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><p>1、下载所需的zip包，我在mac环境下的下载路径是</p>
<blockquote>
<p><a href="https://github.com/electron/electron/releases/download/v1.4.5/electron-v1.4.5-darwin-x64.zip" target="_blank" rel="external">https://github.com/electron/electron/releases/download/v1.4.5/electron-v1.4.5-darwin-x64.zip</a></p>
</blockquote>
<p>2、本地缓存目录为</p>
<blockquote>
<p>~/.electron/electron-v1.4.5-darwin-x64.zip</p>
</blockquote>
<p>3、手动下载的zip包放到缓存目录所在位置。</p>
<p>4、重新执行 <code>npm install -g electron</code> 即可</p>
<h3 id="授人以渔"><a href="#授人以渔" class="headerlink" title="授人以渔"></a>授人以渔</h3><p>上面的下载地址和缓存目录是通过阅读install.js脚本，尝试执行并打印部分变量得到的。<br>对于很多其它的使用npm安装的功能模块，都可以通过这个方法，解决下载问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;对于node.js的各种模块安装，最头疼的莫过于下载了。安装包体积巨大，GFW功能强大，服务器在国外，下载成功的几率很小。因此Electron的安装也是很麻烦的。&lt;/p&gt;
&lt;h3 id=&quot;解决方案：&quot;&gt;&lt;a href=&quot;#解决
    
    </summary>
    
      <category term="Electron" scheme="http://coldwinter2.github.io/categories/Electron/"/>
    
    
      <category term="Electron" scheme="http://coldwinter2.github.io/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>Electron 简介</title>
    <link href="http://coldwinter2.github.io/2016/11/electron-intr/"/>
    <id>http://coldwinter2.github.io/2016/11/electron-intr/</id>
    <published>2016-11-12T04:10:20.000Z</published>
    <updated>2016-11-14T01:38:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://electron.atom.io/" target="_blank" rel="external">Electron</a>是一个基于node.js的跨平台桌面应用组件（暂且称之为组件，对node.js只是初学，不知道标准的称呼是什么）。</p>
<p>它最大的有点在于可以使用JavaScript 和 HTML来构建跨平台的桌面应用。</p>
<p>我们常见的文本编辑器 atom，vscode和知名的游戏引擎cocos2dx推出的游戏编辑器cocos creator就是基于<a href="http://electron.atom.io/" target="_blank" rel="external">Electron</a>开发的。</p>
<p>这直接降低了桌面应用开发的难度，并且兼容许多js版本的功能，尤其对于游戏开发，十分友好。</p>
<p>由于近期工具开发的需要，接触了node.js开发，后续会有相关的学习笔记，来整理学习的过程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://electron.atom.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Electron&lt;/a&gt;是一个基于node.js的跨平台桌面应用组件（暂且称之为组件，对node.js只是初学，不知道标准的称呼是什么）。&lt;/
    
    </summary>
    
      <category term="Electron" scheme="http://coldwinter2.github.io/categories/Electron/"/>
    
    
      <category term="Electron" scheme="http://coldwinter2.github.io/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>风格修改</title>
    <link href="http://coldwinter2.github.io/2016/11/style/"/>
    <id>http://coldwinter2.github.io/2016/11/style/</id>
    <published>2016-11-10T09:52:52.000Z</published>
    <updated>2016-11-10T09:53:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="新的风格"><a href="#新的风格" class="headerlink" title="新的风格"></a>新的风格</h3><h4 id="修改了一次标题风格"><a href="#修改了一次标题风格" class="headerlink" title="修改了一次标题风格"></a>修改了一次标题风格</h4><p>背景改为了黑色，与前景色互换了，这样更符合程序员的习惯，而且看多了，也不会觉得累。</p>
<p>按照管理，应当有一些仪式性的东西。比如，helloworld</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="string">"Hello Coldwinter's blog"</span>);</div></pre></td></tr></table></figure>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">'Hello Coldwinter'</span>s blog<span class="string">')</span></div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"Hello Coldwinter's blog"</span>);</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> <span class="string">"Hello Coldwinter's blog"</span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>各种代码的高亮</p>
</blockquote>
<ol>
<li>表格的支持</li>
<li>有序的</li>
</ol>
<ul>
<li>无序的</li>
<li>以及不知道是什么的</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;新的风格&quot;&gt;&lt;a href=&quot;#新的风格&quot; class=&quot;headerlink&quot; title=&quot;新的风格&quot;&gt;&lt;/a&gt;新的风格&lt;/h3&gt;&lt;h4 id=&quot;修改了一次标题风格&quot;&gt;&lt;a href=&quot;#修改了一次标题风格&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
    
      <category term="日记" scheme="http://coldwinter2.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>第一篇文章</title>
    <link href="http://coldwinter2.github.io/2016/11/hello-world/"/>
    <id>http://coldwinter2.github.io/2016/11/hello-world/</id>
    <published>2016-11-10T09:50:52.000Z</published>
    <updated>2016-11-14T01:38:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直想坚持写博客，但是结果总是各种站点被关停，因此很久都没有好好写过博客。</p>
<p>最近终于下定决心，在github上创建了自己的博客站点，以后会经常来更新点东西。权当自己的日常笔记。</p>
<p>希望有兴趣的朋友来坐坐。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直想坚持写博客，但是结果总是各种站点被关停，因此很久都没有好好写过博客。&lt;/p&gt;
&lt;p&gt;最近终于下定决心，在github上创建了自己的博客站点，以后会经常来更新点东西。权当自己的日常笔记。&lt;/p&gt;
&lt;p&gt;希望有兴趣的朋友来坐坐。&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
