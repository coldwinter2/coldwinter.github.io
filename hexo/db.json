{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1478749991000},{"_id":"themes/maupassant/.DS_Store","hash":"023700cf42611b81f2a257b0e8059bcb1d5f2a4e","modified":1479103603000},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1478749991000},{"_id":"themes/maupassant/README.md","hash":"75d8c42569809961953d1934de445418c00ab94c","modified":1478749991000},{"_id":"themes/maupassant/_config.yml","hash":"40e1f9cddf55472a8a79b37bbffe4ae032fc72ad","modified":1478775128000},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1478749991000},{"_id":"source/_posts/electron-intr.md","hash":"13e9143e70cafce4f14278239fbbe29d04452a34","modified":1479087532000},{"_id":"source/_posts/hello-world.md","hash":"9c520a9edf71f58842239d7b391d3da62eca5304","modified":1479087532000},{"_id":"source/_posts/electron-setup.md","hash":"552b34649c792e981bbd48190cecc25956d03242","modified":1479087532000},{"_id":"source/_posts/style.md","hash":"160a1023f27e54eeace877590aaf1c3b796e3838","modified":1478771596000},{"_id":"source/_posts/websocket.md","hash":"f0b9ae1fc4276930f1f4b53be1ccaa6ba85f74d4","modified":1479104659000},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1478749991000},{"_id":"themes/maupassant/languages/en.yml","hash":"e13ab1a2d2f1edbe67b4c035fd4667cb6a31db8e","modified":1478749991000},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"15e057ec4f23a49ed5b9ebf9b5ef6ad9a0a97a30","modified":1478775080000},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1478749991000},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1478749991000},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1478749991000},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1478749991000},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1478749991000},{"_id":"themes/maupassant/layout/base-without-sidebar.jade","hash":"1ad721de96784bf4253316b796db6200148d4152","modified":1478749991000},{"_id":"themes/maupassant/layout/base.jade","hash":"852c610ac392ef2fa130dbe73bcf4f96f423c869","modified":1478749991000},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1478749991000},{"_id":"themes/maupassant/layout/index.jade","hash":"7466ce52023ed8a413a6b4461354a9e20e62fc14","modified":1478749991000},{"_id":"themes/maupassant/layout/post.jade","hash":"9cf29fb0daed95935154ce0fa2b154df5a9b11b1","modified":1478749991000},{"_id":"themes/maupassant/layout/single-column.jade","hash":"c35fff4d9b331a41af5bc10f4278ec3d9da503db","modified":1478749991000},{"_id":"themes/maupassant/layout/timeline.jade","hash":"f03d8df63a188543cfe4e85e76194abe081411a1","modified":1478749991000},{"_id":"themes/maupassant/source/.DS_Store","hash":"960145f857c531bfdccb07ae4ce521504237729b","modified":1478776395000},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"d5fa9e254ac4646e7e89947444bfbbcc7adfe79b","modified":1478778586000},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"3dbcc9a9f0d6e55da191d3393c18bbfcfe99fa69","modified":1478749991000},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"6c7f63ba04a4d28323ba31e79a4927f3d3fcc56e","modified":1478749991000},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1478749991000},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1478749991000},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1478749991000},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1478749991000},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1478749991000},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1478749991000},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1478749991000},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1478749991000},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1478749991000},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1478749991000},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1478749991000},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1478749991000},{"_id":"themes/maupassant/source/css/style.scss","hash":"ef196d0b60bbcfa58c70ecd1141cb793d88705a2","modified":1479103639000},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1478749991000},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1478749991000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1478749991000},{"_id":"themes/maupassant/source/css/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1478775004000},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1478749991000},{"_id":"themes/maupassant/source/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1478749991000},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1478749991000},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1478749991000},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1478749991000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1478749991000},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1478749991000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1478749991000},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1478749991000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1478749991000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1478749991000},{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1479101880000},{"_id":"public/2016/11/electron-setup/index.html","hash":"dfcdb1fa8982feebca1b8c4397b42f4389654318","modified":1479103663851},{"_id":"public/2016/11/electron-intr/index.html","hash":"ba9a85f3750f29329afd81298734cbb8319d4806","modified":1479103663851},{"_id":"public/2016/11/style/index.html","hash":"75f2b7404429f8663d14c22bc5d8f5cdf7daa11b","modified":1479103663852},{"_id":"public/2016/11/hello-world/index.html","hash":"4b8bc35290becd61f7e8bdca2b959416969d5b3e","modified":1479103663852},{"_id":"public/archives/index.html","hash":"ab3c6941bc0007805d2a039a7162fbe096b51357","modified":1479103663852},{"_id":"public/archives/2016/index.html","hash":"ab3c6941bc0007805d2a039a7162fbe096b51357","modified":1479103663852},{"_id":"public/archives/2016/11/index.html","hash":"ab3c6941bc0007805d2a039a7162fbe096b51357","modified":1479103663852},{"_id":"public/categories/Electron/index.html","hash":"2c398bd2a350e6a27ce06cf18ffb1b57e64fe613","modified":1479103663852},{"_id":"public/index.html","hash":"94490cf6c711ec52ffa59c30ed42ee556e699980","modified":1479103663852},{"_id":"public/tags/Electron/index.html","hash":"2c398bd2a350e6a27ce06cf18ffb1b57e64fe613","modified":1479103663852},{"_id":"public/tags/日记/index.html","hash":"6f1400506b8e7433f5c5dedb9ebfe37ea14b8d82","modified":1479103663852},{"_id":"public/2016/11/websocket/index.html","hash":"3fc946fa0078f572d25a04c2f2fae8ff599fd307","modified":1479104678321},{"_id":"public/categories/node-js/index.html","hash":"9bff4d2203f7afd34c1c80a185ce3283835166e2","modified":1479103663854},{"_id":"public/categories/node-js/webSocket/index.html","hash":"75cf439592607516b9790def7d94f3e05f3b4a64","modified":1479103663854},{"_id":"public/tags/webSocket/index.html","hash":"75cf439592607516b9790def7d94f3e05f3b4a64","modified":1479103663854},{"_id":"public/tags/socket-io/index.html","hash":"4bc16c4979aa6689b2b90d9772762e4f73e6b8cf","modified":1479103663855},{"_id":"public/css/style.css","hash":"ab87225d535a85b4664c0b9566622c13fa28674c","modified":1479103663885}],"Category":[{"name":"Electron","_id":"civhmiju00003bbh5txqa4ph9"},{"name":"node.js","_id":"civhmijuh0007bbh5y91ci8oa"},{"name":"webSocket","parent":"civhmijuh0007bbh5y91ci8oa","_id":"civhmijuj000fbbh5esuwstuq"}],"Data":[],"Page":[],"Post":[{"title":"第一篇文章","date":"2016-11-10T09:50:52.000Z","_content":"\n一直想坚持写博客，但是结果总是各种站点被关停，因此很久都没有好好写过博客。\n\n最近终于下定决心，在github上创建了自己的博客站点，以后会经常来更新点东西。权当自己的日常笔记。\n\n希望有兴趣的朋友来坐坐。\n","source":"_posts/hello-world.md","raw":"---\ntitle: 第一篇文章\ndate: 2016-11-10 17:50:52\n---\n\n一直想坚持写博客，但是结果总是各种站点被关停，因此很久都没有好好写过博客。\n\n最近终于下定决心，在github上创建了自己的博客站点，以后会经常来更新点东西。权当自己的日常笔记。\n\n希望有兴趣的朋友来坐坐。\n","slug":"hello-world","published":1,"updated":"2016-11-14T01:38:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civhmijto0000bbh59hukz9nc","content":"<p>一直想坚持写博客，但是结果总是各种站点被关停，因此很久都没有好好写过博客。</p>\n<p>最近终于下定决心，在github上创建了自己的博客站点，以后会经常来更新点东西。权当自己的日常笔记。</p>\n<p>希望有兴趣的朋友来坐坐。</p>\n","excerpt":"","more":"<p>一直想坚持写博客，但是结果总是各种站点被关停，因此很久都没有好好写过博客。</p>\n<p>最近终于下定决心，在github上创建了自己的博客站点，以后会经常来更新点东西。权当自己的日常笔记。</p>\n<p>希望有兴趣的朋友来坐坐。</p>\n"},{"title":"Electron 简介","date":"2016-11-12T04:10:20.000Z","_content":"\n[Electron](http://electron.atom.io/)是一个基于node.js的跨平台桌面应用组件（暂且称之为组件，对node.js只是初学，不知道标准的称呼是什么）。\n\n它最大的有点在于可以使用JavaScript 和 HTML来构建跨平台的桌面应用。\n\n我们常见的文本编辑器 atom，vscode和知名的游戏引擎cocos2dx推出的游戏编辑器cocos creator就是基于[Electron](http://electron.atom.io/)开发的。\n\n这直接降低了桌面应用开发的难度，并且兼容许多js版本的功能，尤其对于游戏开发，十分友好。\n\n由于近期工具开发的需要，接触了node.js开发，后续会有相关的学习笔记，来整理学习的过程。","source":"_posts/electron-intr.md","raw":"---\ntitle:  Electron 简介\ndate: 2016-11-12 12:10:20\ntags: Electron\ncategory: Electron\n---\n\n[Electron](http://electron.atom.io/)是一个基于node.js的跨平台桌面应用组件（暂且称之为组件，对node.js只是初学，不知道标准的称呼是什么）。\n\n它最大的有点在于可以使用JavaScript 和 HTML来构建跨平台的桌面应用。\n\n我们常见的文本编辑器 atom，vscode和知名的游戏引擎cocos2dx推出的游戏编辑器cocos creator就是基于[Electron](http://electron.atom.io/)开发的。\n\n这直接降低了桌面应用开发的难度，并且兼容许多js版本的功能，尤其对于游戏开发，十分友好。\n\n由于近期工具开发的需要，接触了node.js开发，后续会有相关的学习笔记，来整理学习的过程。","slug":"electron-intr","published":1,"updated":"2016-11-14T01:38:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civhmijtt0001bbh5szjketl3","content":"<p><a href=\"http://electron.atom.io/\" target=\"_blank\" rel=\"external\">Electron</a>是一个基于node.js的跨平台桌面应用组件（暂且称之为组件，对node.js只是初学，不知道标准的称呼是什么）。</p>\n<p>它最大的有点在于可以使用JavaScript 和 HTML来构建跨平台的桌面应用。</p>\n<p>我们常见的文本编辑器 atom，vscode和知名的游戏引擎cocos2dx推出的游戏编辑器cocos creator就是基于<a href=\"http://electron.atom.io/\" target=\"_blank\" rel=\"external\">Electron</a>开发的。</p>\n<p>这直接降低了桌面应用开发的难度，并且兼容许多js版本的功能，尤其对于游戏开发，十分友好。</p>\n<p>由于近期工具开发的需要，接触了node.js开发，后续会有相关的学习笔记，来整理学习的过程。</p>\n","excerpt":"","more":"<p><a href=\"http://electron.atom.io/\">Electron</a>是一个基于node.js的跨平台桌面应用组件（暂且称之为组件，对node.js只是初学，不知道标准的称呼是什么）。</p>\n<p>它最大的有点在于可以使用JavaScript 和 HTML来构建跨平台的桌面应用。</p>\n<p>我们常见的文本编辑器 atom，vscode和知名的游戏引擎cocos2dx推出的游戏编辑器cocos creator就是基于<a href=\"http://electron.atom.io/\">Electron</a>开发的。</p>\n<p>这直接降低了桌面应用开发的难度，并且兼容许多js版本的功能，尤其对于游戏开发，十分友好。</p>\n<p>由于近期工具开发的需要，接触了node.js开发，后续会有相关的学习笔记，来整理学习的过程。</p>\n"},{"title":"风格修改","date":"2016-11-10T09:52:52.000Z","_content":"\n### 新的风格\n\n#### 修改了一次标题风格\n\n背景改为了黑色，与前景色互换了，这样更符合程序员的习惯，而且看多了，也不会觉得累。\n\n按照管理，应当有一些仪式性的东西。比如，helloworld\n\n```javaScript\ndocument.write(\"Hello Coldwinter's blog\");\n```\n\n```lua\nprint('Hello Coldwinter's blog')\n```\n\n```C++\nprintf(\"%s\",\"Hello Coldwinter's blog\");\n```\n\n```php\necho \"Hello Coldwinter's blog\";\n```\n\n\n> 各种代码的高亮\n\n1. 表格的支持\n2. 有序的\n\n* 无序的\n* 以及不知道是什么的","source":"_posts/style.md","raw":"---\ntitle: 风格修改\ndate: 2016-11-10 17:52:52\ntags: 日记\n---\n\n### 新的风格\n\n#### 修改了一次标题风格\n\n背景改为了黑色，与前景色互换了，这样更符合程序员的习惯，而且看多了，也不会觉得累。\n\n按照管理，应当有一些仪式性的东西。比如，helloworld\n\n```javaScript\ndocument.write(\"Hello Coldwinter's blog\");\n```\n\n```lua\nprint('Hello Coldwinter's blog')\n```\n\n```C++\nprintf(\"%s\",\"Hello Coldwinter's blog\");\n```\n\n```php\necho \"Hello Coldwinter's blog\";\n```\n\n\n> 各种代码的高亮\n\n1. 表格的支持\n2. 有序的\n\n* 无序的\n* 以及不知道是什么的","slug":"style","published":1,"updated":"2016-11-10T09:53:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civhmijtw0002bbh5yjlsflds","content":"<h3 id=\"新的风格\"><a href=\"#新的风格\" class=\"headerlink\" title=\"新的风格\"></a>新的风格</h3><h4 id=\"修改了一次标题风格\"><a href=\"#修改了一次标题风格\" class=\"headerlink\" title=\"修改了一次标题风格\"></a>修改了一次标题风格</h4><p>背景改为了黑色，与前景色互换了，这样更符合程序员的习惯，而且看多了，也不会觉得累。</p>\n<p>按照管理，应当有一些仪式性的东西。比如，helloworld</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"Hello Coldwinter's blog\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">'Hello Coldwinter'</span>s blog<span class=\"string\">')</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,<span class=\"string\">\"Hello Coldwinter's blog\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Hello Coldwinter's blog\"</span>;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>各种代码的高亮</p>\n</blockquote>\n<ol>\n<li>表格的支持</li>\n<li>有序的</li>\n</ol>\n<ul>\n<li>无序的</li>\n<li>以及不知道是什么的</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"新的风格\"><a href=\"#新的风格\" class=\"headerlink\" title=\"新的风格\"></a>新的风格</h3><h4 id=\"修改了一次标题风格\"><a href=\"#修改了一次标题风格\" class=\"headerlink\" title=\"修改了一次标题风格\"></a>修改了一次标题风格</h4><p>背景改为了黑色，与前景色互换了，这样更符合程序员的习惯，而且看多了，也不会觉得累。</p>\n<p>按照管理，应当有一些仪式性的东西。比如，helloworld</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"Hello Coldwinter's blog\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">'Hello Coldwinter'</span>s blog<span class=\"string\">')</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,<span class=\"string\">\"Hello Coldwinter's blog\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Hello Coldwinter's blog\"</span>;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>各种代码的高亮</p>\n</blockquote>\n<ol>\n<li>表格的支持</li>\n<li>有序的</li>\n</ol>\n<ul>\n<li>无序的</li>\n<li>以及不知道是什么的</li>\n</ul>\n"},{"title":"Express + socket.io 聊天程序踩坑实录","date":"2016-11-14T05:20:13.000Z","_content":"\n### 起因\n\n&nbsp;&nbsp;&nbsp;&nbsp;本文其实没有其实没有很特别的内容，只不过是写一个简单的node.js下express+socket.io的基础示例。不过就是这样一个网上随处都可以找到的示例，却让我踩了不小的一个坑。含坑的教程有很多，我随便贴一些连接上来，基本错的都一样，大部分都是复制粘贴来的吧。例如：\n\n\n[使用Node.js+Socket.IO搭建WebSocket实时应用](http://www.open-open.com/lib/view/open1402479198587.html)\n\n[Node.js + Web Socket 打造即时聊天程序嗨聊](http://www.cnblogs.com/Wayou/p/hichat_built_with_nodejs_socket.html)\n\n[NodeJS+Express+Socket.io的一个简单例子](http://www.tuicool.com/articles/fmeQVjZ)\n\n\n下面，我就以一个聊天程序来说明一下踩坑的过程。\n\n\n1. 下载安装node.js(自行百度）\n2. 安装npm（自行百度）\n3. 创建工程目录 ` mkdir webSocket ` 并且切换到该目录\n4. 在webSocket下创建npm工程 ` npm init ` 按照提示完成\n5. 安装express ` npm install express ` (注意，此处非全局安装)\n6. 安装socket.io ` npm install socket.io ` (同上)\n7. 创建web目录www ` mkdir www `\n8. 创建js目录 ` mkdir www/js ` （这一步在本文内无用，是用来放客户端js代码的)\n9. 在js目录中安装socket.io.js,这个文件在 `node\\_modules/socket.io\\_client` 内\n10. 创建相应的 `index.js`、`www/index.html`文件\n\nOK，基本的环境搭建到此结束。下面开始踩坑。\n\n\n### 踩坑过程\n\n##### 1.Client端引用Socket.io.js的问题\n\n首先说，socket.io不是一定要放在socket.io文件夹内的，几乎网上大部分教程，代码里都写着\n\n```html\n<script src=\"socket.io/socket.io.js\"></script>\n```\n\n这让很多刚来入门的新人，以为，需要吧socket.io.js放在一个叫做socket.io的文件夹里，并且提供访问。其实是没必要的。\n因为已经存在一个叫socket.io\\_client的包，在socket.io在创建的时候会自己注册一个socket.io的url访问，因此用户无需干预。\n\n其实这个socket.io.js也可以放在任何位置，只要从[socket.io](http://socket.io/)下载对应的socket的独立js文件，就当做普通的js一样一用就可以了，无需了解服务端内部究竟干了什么。\n\n然而很多人发现了，按照教程，socket.io怎么也无法连接成功。如果自己手动引入了别的socket.io.js而且打开浏览器的开发者工具，就会看到一个http请求 http://localhost:xxxx/socket.io/?EIO=xxxx  返回了404错误。由此很可能会联想到，和这个文件的路径有关。\n\n其实这个错误和这个没关系，而和服务端的代码有关。\n这就引出了教程中的第二个坑。\n\n\n##### 2.服务端代码的坑\n\n和前面一个坑相比，这个才是正经的坑，上面那个只可能影响到一些喜欢深入思考的初学者，但是下面这个坑，绝对会影响到所有初学者。\n\n\n含坑代码\n\n```javascript\nvar app = require('express')();\nvar http = require('http').Server(app);\nvar io = require('socket.io')(http);\n\napp.get('/', function(req, res){\n  res.sendfile('index.html');\n});\n\nio.on('connection', function(socket){\n  console.log('a user connected');\n    \n  socket.on('chat message', function(msg){\n    console.log('message: ' + msg);\n\n    io.emit('chat message', msg);\n  });\n\n});\n\napp.set('port', process.env.PORT || 3000);\n\nvar server = http.listen(app.get('port'), function() {\n  console.log('start at port:' + server.address().port);\n});\n```\n\n我随便从前面的教程连接里摘出来的一段主要代码。\n这段代码的坑在于，express是一个完整的http服务器框架，因此不再需要http这个库了。\n在建立本地监听的过程中，不需要 `require('http').Server(app)` 这种写法了，直接调用express的listen方法就可以了，例如：\n\n```javascript\nvar express = require('express');\nvar app = express();\nserver = app.listen(8000,function()\n{\n    console.log('服务器启动');\n});\nio = require('socket.io').listen(server);\n\n// some other code\n\n```\n\n如果使用http包来创建，则对应的socket.io的相关功能就没有了。\n\n### 踩坑分析\n\n其实这个坑，并不是原博文作者的问题，而是版本迭代问题。\n大概是express经过几个版本的迭代在创建上有一些变化。但是远博文没有说明`node.js` `socket.io`和`express`的版本。\n\n所以我一定要附上我所用环境的版本。\n\n```\nnode.js    v6.9.1\nsocket.io  1.5.1\nsocket.io_client  1.4.5\nexpress    4.14.0\n\n```\n\n踩过此坑，特此记录","source":"_posts/websocket.md","raw":"---\ntitle: Express + socket.io 聊天程序踩坑实录\ndate: 2016-11-14 13:20:13\ntags: \n- webSocket\n- socket.io\ncategory: \n- node.js\n- webSocket\n---\n\n### 起因\n\n&nbsp;&nbsp;&nbsp;&nbsp;本文其实没有其实没有很特别的内容，只不过是写一个简单的node.js下express+socket.io的基础示例。不过就是这样一个网上随处都可以找到的示例，却让我踩了不小的一个坑。含坑的教程有很多，我随便贴一些连接上来，基本错的都一样，大部分都是复制粘贴来的吧。例如：\n\n\n[使用Node.js+Socket.IO搭建WebSocket实时应用](http://www.open-open.com/lib/view/open1402479198587.html)\n\n[Node.js + Web Socket 打造即时聊天程序嗨聊](http://www.cnblogs.com/Wayou/p/hichat_built_with_nodejs_socket.html)\n\n[NodeJS+Express+Socket.io的一个简单例子](http://www.tuicool.com/articles/fmeQVjZ)\n\n\n下面，我就以一个聊天程序来说明一下踩坑的过程。\n\n\n1. 下载安装node.js(自行百度）\n2. 安装npm（自行百度）\n3. 创建工程目录 ` mkdir webSocket ` 并且切换到该目录\n4. 在webSocket下创建npm工程 ` npm init ` 按照提示完成\n5. 安装express ` npm install express ` (注意，此处非全局安装)\n6. 安装socket.io ` npm install socket.io ` (同上)\n7. 创建web目录www ` mkdir www `\n8. 创建js目录 ` mkdir www/js ` （这一步在本文内无用，是用来放客户端js代码的)\n9. 在js目录中安装socket.io.js,这个文件在 `node\\_modules/socket.io\\_client` 内\n10. 创建相应的 `index.js`、`www/index.html`文件\n\nOK，基本的环境搭建到此结束。下面开始踩坑。\n\n\n### 踩坑过程\n\n##### 1.Client端引用Socket.io.js的问题\n\n首先说，socket.io不是一定要放在socket.io文件夹内的，几乎网上大部分教程，代码里都写着\n\n```html\n<script src=\"socket.io/socket.io.js\"></script>\n```\n\n这让很多刚来入门的新人，以为，需要吧socket.io.js放在一个叫做socket.io的文件夹里，并且提供访问。其实是没必要的。\n因为已经存在一个叫socket.io\\_client的包，在socket.io在创建的时候会自己注册一个socket.io的url访问，因此用户无需干预。\n\n其实这个socket.io.js也可以放在任何位置，只要从[socket.io](http://socket.io/)下载对应的socket的独立js文件，就当做普通的js一样一用就可以了，无需了解服务端内部究竟干了什么。\n\n然而很多人发现了，按照教程，socket.io怎么也无法连接成功。如果自己手动引入了别的socket.io.js而且打开浏览器的开发者工具，就会看到一个http请求 http://localhost:xxxx/socket.io/?EIO=xxxx  返回了404错误。由此很可能会联想到，和这个文件的路径有关。\n\n其实这个错误和这个没关系，而和服务端的代码有关。\n这就引出了教程中的第二个坑。\n\n\n##### 2.服务端代码的坑\n\n和前面一个坑相比，这个才是正经的坑，上面那个只可能影响到一些喜欢深入思考的初学者，但是下面这个坑，绝对会影响到所有初学者。\n\n\n含坑代码\n\n```javascript\nvar app = require('express')();\nvar http = require('http').Server(app);\nvar io = require('socket.io')(http);\n\napp.get('/', function(req, res){\n  res.sendfile('index.html');\n});\n\nio.on('connection', function(socket){\n  console.log('a user connected');\n    \n  socket.on('chat message', function(msg){\n    console.log('message: ' + msg);\n\n    io.emit('chat message', msg);\n  });\n\n});\n\napp.set('port', process.env.PORT || 3000);\n\nvar server = http.listen(app.get('port'), function() {\n  console.log('start at port:' + server.address().port);\n});\n```\n\n我随便从前面的教程连接里摘出来的一段主要代码。\n这段代码的坑在于，express是一个完整的http服务器框架，因此不再需要http这个库了。\n在建立本地监听的过程中，不需要 `require('http').Server(app)` 这种写法了，直接调用express的listen方法就可以了，例如：\n\n```javascript\nvar express = require('express');\nvar app = express();\nserver = app.listen(8000,function()\n{\n    console.log('服务器启动');\n});\nio = require('socket.io').listen(server);\n\n// some other code\n\n```\n\n如果使用http包来创建，则对应的socket.io的相关功能就没有了。\n\n### 踩坑分析\n\n其实这个坑，并不是原博文作者的问题，而是版本迭代问题。\n大概是express经过几个版本的迭代在创建上有一些变化。但是远博文没有说明`node.js` `socket.io`和`express`的版本。\n\n所以我一定要附上我所用环境的版本。\n\n```\nnode.js    v6.9.1\nsocket.io  1.5.1\nsocket.io_client  1.4.5\nexpress    4.14.0\n\n```\n\n踩过此坑，特此记录","slug":"websocket","published":1,"updated":"2016-11-14T06:24:19.000Z","_id":"civhmijue0005bbh503ku7pri","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;本文其实没有其实没有很特别的内容，只不过是写一个简单的node.js下express+socket.io的基础示例。不过就是这样一个网上随处都可以找到的示例，却让我踩了不小的一个坑。含坑的教程有很多，我随便贴一些连接上来，基本错的都一样，大部分都是复制粘贴来的吧。例如：</p>\n<p><a href=\"http://www.open-open.com/lib/view/open1402479198587.html\" target=\"_blank\" rel=\"external\">使用Node.js+Socket.IO搭建WebSocket实时应用</a></p>\n<p><a href=\"http://www.cnblogs.com/Wayou/p/hichat_built_with_nodejs_socket.html\" target=\"_blank\" rel=\"external\">Node.js + Web Socket 打造即时聊天程序嗨聊</a></p>\n<p><a href=\"http://www.tuicool.com/articles/fmeQVjZ\" target=\"_blank\" rel=\"external\">NodeJS+Express+Socket.io的一个简单例子</a></p>\n<p>下面，我就以一个聊天程序来说明一下踩坑的过程。</p>\n<ol>\n<li>下载安装node.js(自行百度）</li>\n<li>安装npm（自行百度）</li>\n<li>创建工程目录 <code>mkdir webSocket</code> 并且切换到该目录</li>\n<li>在webSocket下创建npm工程 <code>npm init</code> 按照提示完成</li>\n<li>安装express <code>npm install express</code> (注意，此处非全局安装)</li>\n<li>安装socket.io <code>npm install socket.io</code> (同上)</li>\n<li>创建web目录www <code>mkdir www</code></li>\n<li>创建js目录 <code>mkdir www/js</code> （这一步在本文内无用，是用来放客户端js代码的)</li>\n<li>在js目录中安装socket.io.js,这个文件在 <code>node\\_modules/socket.io\\_client</code> 内</li>\n<li>创建相应的 <code>index.js</code>、<code>www/index.html</code>文件</li>\n</ol>\n<p>OK，基本的环境搭建到此结束。下面开始踩坑。</p>\n<h3 id=\"踩坑过程\"><a href=\"#踩坑过程\" class=\"headerlink\" title=\"踩坑过程\"></a>踩坑过程</h3><h5 id=\"1-Client端引用Socket-io-js的问题\"><a href=\"#1-Client端引用Socket-io-js的问题\" class=\"headerlink\" title=\"1.Client端引用Socket.io.js的问题\"></a>1.Client端引用Socket.io.js的问题</h5><p>首先说，socket.io不是一定要放在socket.io文件夹内的，几乎网上大部分教程，代码里都写着</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"socket.io/socket.io.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这让很多刚来入门的新人，以为，需要吧socket.io.js放在一个叫做socket.io的文件夹里，并且提供访问。其实是没必要的。<br>因为已经存在一个叫socket.io_client的包，在socket.io在创建的时候会自己注册一个socket.io的url访问，因此用户无需干预。</p>\n<p>其实这个socket.io.js也可以放在任何位置，只要从<a href=\"http://socket.io/\" target=\"_blank\" rel=\"external\">socket.io</a>下载对应的socket的独立js文件，就当做普通的js一样一用就可以了，无需了解服务端内部究竟干了什么。</p>\n<p>然而很多人发现了，按照教程，socket.io怎么也无法连接成功。如果自己手动引入了别的socket.io.js而且打开浏览器的开发者工具，就会看到一个http请求 <a href=\"http://localhost:xxxx/socket.io/?EIO=xxxx\" target=\"_blank\" rel=\"external\">http://localhost:xxxx/socket.io/?EIO=xxxx</a>  返回了404错误。由此很可能会联想到，和这个文件的路径有关。</p>\n<p>其实这个错误和这个没关系，而和服务端的代码有关。<br>这就引出了教程中的第二个坑。</p>\n<h5 id=\"2-服务端代码的坑\"><a href=\"#2-服务端代码的坑\" class=\"headerlink\" title=\"2.服务端代码的坑\"></a>2.服务端代码的坑</h5><p>和前面一个坑相比，这个才是正经的坑，上面那个只可能影响到一些喜欢深入思考的初学者，但是下面这个坑，绝对会影响到所有初学者。</p>\n<p>含坑代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)();</div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>).Server(app);</div><div class=\"line\"><span class=\"keyword\">var</span> io = <span class=\"built_in\">require</span>(<span class=\"string\">'socket.io'</span>)(http);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  res.sendfile(<span class=\"string\">'index.html'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">io.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">socket</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'a user connected'</span>);</div><div class=\"line\">    </div><div class=\"line\">  socket.on(<span class=\"string\">'chat message'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'message: '</span> + msg);</div><div class=\"line\"></div><div class=\"line\">    io.emit(<span class=\"string\">'chat message'</span>, msg);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.set(<span class=\"string\">'port'</span>, process.env.PORT || <span class=\"number\">3000</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = http.listen(app.get(<span class=\"string\">'port'</span>), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'start at port:'</span> + server.address().port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>我随便从前面的教程连接里摘出来的一段主要代码。<br>这段代码的坑在于，express是一个完整的http服务器框架，因此不再需要http这个库了。<br>在建立本地监听的过程中，不需要 <code>require(&#39;http&#39;).Server(app)</code> 这种写法了，直接调用express的listen方法就可以了，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">server = app.listen(<span class=\"number\">8000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器启动'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">io = <span class=\"built_in\">require</span>(<span class=\"string\">'socket.io'</span>).listen(server);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// some other code</span></div></pre></td></tr></table></figure>\n<p>如果使用http包来创建，则对应的socket.io的相关功能就没有了。</p>\n<h3 id=\"踩坑分析\"><a href=\"#踩坑分析\" class=\"headerlink\" title=\"踩坑分析\"></a>踩坑分析</h3><p>其实这个坑，并不是原博文作者的问题，而是版本迭代问题。<br>大概是express经过几个版本的迭代在创建上有一些变化。但是远博文没有说明<code>node.js</code> <code>socket.io</code>和<code>express</code>的版本。</p>\n<p>所以我一定要附上我所用环境的版本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">node.js    v6.9.1</div><div class=\"line\">socket.io  1.5.1</div><div class=\"line\">socket.io_client  1.4.5</div><div class=\"line\">express    4.14.0</div></pre></td></tr></table></figure>\n<p>踩过此坑，特此记录</p>\n","excerpt":"","more":"<h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;本文其实没有其实没有很特别的内容，只不过是写一个简单的node.js下express+socket.io的基础示例。不过就是这样一个网上随处都可以找到的示例，却让我踩了不小的一个坑。含坑的教程有很多，我随便贴一些连接上来，基本错的都一样，大部分都是复制粘贴来的吧。例如：</p>\n<p><a href=\"http://www.open-open.com/lib/view/open1402479198587.html\">使用Node.js+Socket.IO搭建WebSocket实时应用</a></p>\n<p><a href=\"http://www.cnblogs.com/Wayou/p/hichat_built_with_nodejs_socket.html\">Node.js + Web Socket 打造即时聊天程序嗨聊</a></p>\n<p><a href=\"http://www.tuicool.com/articles/fmeQVjZ\">NodeJS+Express+Socket.io的一个简单例子</a></p>\n<p>下面，我就以一个聊天程序来说明一下踩坑的过程。</p>\n<ol>\n<li>下载安装node.js(自行百度）</li>\n<li>安装npm（自行百度）</li>\n<li>创建工程目录 <code>mkdir webSocket</code> 并且切换到该目录</li>\n<li>在webSocket下创建npm工程 <code>npm init</code> 按照提示完成</li>\n<li>安装express <code>npm install express</code> (注意，此处非全局安装)</li>\n<li>安装socket.io <code>npm install socket.io</code> (同上)</li>\n<li>创建web目录www <code>mkdir www</code></li>\n<li>创建js目录 <code>mkdir www/js</code> （这一步在本文内无用，是用来放客户端js代码的)</li>\n<li>在js目录中安装socket.io.js,这个文件在 <code>node\\_modules/socket.io\\_client</code> 内</li>\n<li>创建相应的 <code>index.js</code>、<code>www/index.html</code>文件</li>\n</ol>\n<p>OK，基本的环境搭建到此结束。下面开始踩坑。</p>\n<h3 id=\"踩坑过程\"><a href=\"#踩坑过程\" class=\"headerlink\" title=\"踩坑过程\"></a>踩坑过程</h3><h5 id=\"1-Client端引用Socket-io-js的问题\"><a href=\"#1-Client端引用Socket-io-js的问题\" class=\"headerlink\" title=\"1.Client端引用Socket.io.js的问题\"></a>1.Client端引用Socket.io.js的问题</h5><p>首先说，socket.io不是一定要放在socket.io文件夹内的，几乎网上大部分教程，代码里都写着</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"socket.io/socket.io.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这让很多刚来入门的新人，以为，需要吧socket.io.js放在一个叫做socket.io的文件夹里，并且提供访问。其实是没必要的。<br>因为已经存在一个叫socket.io_client的包，在socket.io在创建的时候会自己注册一个socket.io的url访问，因此用户无需干预。</p>\n<p>其实这个socket.io.js也可以放在任何位置，只要从<a href=\"http://socket.io/\">socket.io</a>下载对应的socket的独立js文件，就当做普通的js一样一用就可以了，无需了解服务端内部究竟干了什么。</p>\n<p>然而很多人发现了，按照教程，socket.io怎么也无法连接成功。如果自己手动引入了别的socket.io.js而且打开浏览器的开发者工具，就会看到一个http请求 <a href=\"http://localhost:xxxx/socket.io/?EIO=xxxx\">http://localhost:xxxx/socket.io/?EIO=xxxx</a>  返回了404错误。由此很可能会联想到，和这个文件的路径有关。</p>\n<p>其实这个错误和这个没关系，而和服务端的代码有关。<br>这就引出了教程中的第二个坑。</p>\n<h5 id=\"2-服务端代码的坑\"><a href=\"#2-服务端代码的坑\" class=\"headerlink\" title=\"2.服务端代码的坑\"></a>2.服务端代码的坑</h5><p>和前面一个坑相比，这个才是正经的坑，上面那个只可能影响到一些喜欢深入思考的初学者，但是下面这个坑，绝对会影响到所有初学者。</p>\n<p>含坑代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)();</div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>).Server(app);</div><div class=\"line\"><span class=\"keyword\">var</span> io = <span class=\"built_in\">require</span>(<span class=\"string\">'socket.io'</span>)(http);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  res.sendfile(<span class=\"string\">'index.html'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">io.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">socket</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'a user connected'</span>);</div><div class=\"line\">    </div><div class=\"line\">  socket.on(<span class=\"string\">'chat message'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'message: '</span> + msg);</div><div class=\"line\"></div><div class=\"line\">    io.emit(<span class=\"string\">'chat message'</span>, msg);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.set(<span class=\"string\">'port'</span>, process.env.PORT || <span class=\"number\">3000</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = http.listen(app.get(<span class=\"string\">'port'</span>), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'start at port:'</span> + server.address().port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>我随便从前面的教程连接里摘出来的一段主要代码。<br>这段代码的坑在于，express是一个完整的http服务器框架，因此不再需要http这个库了。<br>在建立本地监听的过程中，不需要 <code>require(&#39;http&#39;).Server(app)</code> 这种写法了，直接调用express的listen方法就可以了，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">server = app.listen(<span class=\"number\">8000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器启动'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">io = <span class=\"built_in\">require</span>(<span class=\"string\">'socket.io'</span>).listen(server);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// some other code</span></div></pre></td></tr></table></figure>\n<p>如果使用http包来创建，则对应的socket.io的相关功能就没有了。</p>\n<h3 id=\"踩坑分析\"><a href=\"#踩坑分析\" class=\"headerlink\" title=\"踩坑分析\"></a>踩坑分析</h3><p>其实这个坑，并不是原博文作者的问题，而是版本迭代问题。<br>大概是express经过几个版本的迭代在创建上有一些变化。但是远博文没有说明<code>node.js</code> <code>socket.io</code>和<code>express</code>的版本。</p>\n<p>所以我一定要附上我所用环境的版本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">node.js    v6.9.1</div><div class=\"line\">socket.io  1.5.1</div><div class=\"line\">socket.io_client  1.4.5</div><div class=\"line\">express    4.14.0</div></pre></td></tr></table></figure>\n<p>踩过此坑，特此记录</p>\n"},{"title":"Electron 安装","date":"2016-11-12T04:12:45.000Z","_content":"\n&nbsp;&nbsp;&nbsp;&nbsp;对于node.js的各种模块安装，最头疼的莫过于下载了。安装包体积巨大，GFW功能强大，服务器在国外，下载成功的几率很小。因此Electron的安装也是很麻烦的。\n\n### 解决方案：\n1、在安装步骤执行到 ` > node install.js ` 时，按ctrl+c中断过程\n2、阅读install.js的源代码\n3、找到使用本地缓存的逻辑\n4、手动下载zip文件，建立本地缓存，之后使用本地文件进行安装\n\n\n### 步骤：\n1、下载所需的zip包，我在mac环境下的下载路径是\n> [https://github.com/electron/electron/releases/download/v1.4.5/electron-v1.4.5-darwin-x64.zip](https://github.com/electron/electron/releases/download/v1.4.5/electron-v1.4.5-darwin-x64.zip)\n\n2、本地缓存目录为\n> ~/.electron/electron-v1.4.5-darwin-x64.zip\n\n3、手动下载的zip包放到缓存目录所在位置。\n\n4、重新执行 ` npm install -g electron ` 即可\n\n\n### 授人以渔\n上面的下载地址和缓存目录是通过阅读install.js脚本，尝试执行并打印部分变量得到的。\n对于很多其它的使用npm安装的功能模块，都可以通过这个方法，解决下载问题。","source":"_posts/electron-setup.md","raw":"---\ntitle: Electron 安装\ndate: 2016-11-12 12:12:45\ntags: Electron\ncategory: Electron\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp;对于node.js的各种模块安装，最头疼的莫过于下载了。安装包体积巨大，GFW功能强大，服务器在国外，下载成功的几率很小。因此Electron的安装也是很麻烦的。\n\n### 解决方案：\n1、在安装步骤执行到 ` > node install.js ` 时，按ctrl+c中断过程\n2、阅读install.js的源代码\n3、找到使用本地缓存的逻辑\n4、手动下载zip文件，建立本地缓存，之后使用本地文件进行安装\n\n\n### 步骤：\n1、下载所需的zip包，我在mac环境下的下载路径是\n> [https://github.com/electron/electron/releases/download/v1.4.5/electron-v1.4.5-darwin-x64.zip](https://github.com/electron/electron/releases/download/v1.4.5/electron-v1.4.5-darwin-x64.zip)\n\n2、本地缓存目录为\n> ~/.electron/electron-v1.4.5-darwin-x64.zip\n\n3、手动下载的zip包放到缓存目录所在位置。\n\n4、重新执行 ` npm install -g electron ` 即可\n\n\n### 授人以渔\n上面的下载地址和缓存目录是通过阅读install.js脚本，尝试执行并打印部分变量得到的。\n对于很多其它的使用npm安装的功能模块，都可以通过这个方法，解决下载问题。","slug":"electron-setup","published":1,"updated":"2016-11-14T01:38:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civhmijug0006bbh5mjr7ts10","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;对于node.js的各种模块安装，最头疼的莫过于下载了。安装包体积巨大，GFW功能强大，服务器在国外，下载成功的几率很小。因此Electron的安装也是很麻烦的。</p>\n<h3 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h3><p>1、在安装步骤执行到 <code>&gt; node install.js</code> 时，按ctrl+c中断过程<br>2、阅读install.js的源代码<br>3、找到使用本地缓存的逻辑<br>4、手动下载zip文件，建立本地缓存，之后使用本地文件进行安装</p>\n<h3 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h3><p>1、下载所需的zip包，我在mac环境下的下载路径是</p>\n<blockquote>\n<p><a href=\"https://github.com/electron/electron/releases/download/v1.4.5/electron-v1.4.5-darwin-x64.zip\" target=\"_blank\" rel=\"external\">https://github.com/electron/electron/releases/download/v1.4.5/electron-v1.4.5-darwin-x64.zip</a></p>\n</blockquote>\n<p>2、本地缓存目录为</p>\n<blockquote>\n<p>~/.electron/electron-v1.4.5-darwin-x64.zip</p>\n</blockquote>\n<p>3、手动下载的zip包放到缓存目录所在位置。</p>\n<p>4、重新执行 <code>npm install -g electron</code> 即可</p>\n<h3 id=\"授人以渔\"><a href=\"#授人以渔\" class=\"headerlink\" title=\"授人以渔\"></a>授人以渔</h3><p>上面的下载地址和缓存目录是通过阅读install.js脚本，尝试执行并打印部分变量得到的。<br>对于很多其它的使用npm安装的功能模块，都可以通过这个方法，解决下载问题。</p>\n","excerpt":"","more":"<p>&nbsp;&nbsp;&nbsp;&nbsp;对于node.js的各种模块安装，最头疼的莫过于下载了。安装包体积巨大，GFW功能强大，服务器在国外，下载成功的几率很小。因此Electron的安装也是很麻烦的。</p>\n<h3 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h3><p>1、在安装步骤执行到 <code>&gt; node install.js</code> 时，按ctrl+c中断过程<br>2、阅读install.js的源代码<br>3、找到使用本地缓存的逻辑<br>4、手动下载zip文件，建立本地缓存，之后使用本地文件进行安装</p>\n<h3 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h3><p>1、下载所需的zip包，我在mac环境下的下载路径是</p>\n<blockquote>\n<p><a href=\"https://github.com/electron/electron/releases/download/v1.4.5/electron-v1.4.5-darwin-x64.zip\">https://github.com/electron/electron/releases/download/v1.4.5/electron-v1.4.5-darwin-x64.zip</a></p>\n</blockquote>\n<p>2、本地缓存目录为</p>\n<blockquote>\n<p>~/.electron/electron-v1.4.5-darwin-x64.zip</p>\n</blockquote>\n<p>3、手动下载的zip包放到缓存目录所在位置。</p>\n<p>4、重新执行 <code>npm install -g electron</code> 即可</p>\n<h3 id=\"授人以渔\"><a href=\"#授人以渔\" class=\"headerlink\" title=\"授人以渔\"></a>授人以渔</h3><p>上面的下载地址和缓存目录是通过阅读install.js脚本，尝试执行并打印部分变量得到的。<br>对于很多其它的使用npm安装的功能模块，都可以通过这个方法，解决下载问题。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"civhmijug0006bbh5mjr7ts10","category_id":"civhmiju00003bbh5txqa4ph9","_id":"civhmijui000abbh5nv58e10c"},{"post_id":"civhmijtt0001bbh5szjketl3","category_id":"civhmiju00003bbh5txqa4ph9","_id":"civhmijuj000dbbh5iksyx19r"},{"post_id":"civhmijue0005bbh503ku7pri","category_id":"civhmijuh0007bbh5y91ci8oa","_id":"civhmijuk000hbbh5xmrt5rqf"},{"post_id":"civhmijue0005bbh503ku7pri","category_id":"civhmijuj000fbbh5esuwstuq","_id":"civhmijul000jbbh5u4skfgvp"}],"PostTag":[{"post_id":"civhmijug0006bbh5mjr7ts10","tag_id":"civhmijud0004bbh5oatyvzg5","_id":"civhmijui0009bbh5mcvod54v"},{"post_id":"civhmijtt0001bbh5szjketl3","tag_id":"civhmijud0004bbh5oatyvzg5","_id":"civhmijui000bbbh5wbaetbdu"},{"post_id":"civhmijtw0002bbh5yjlsflds","tag_id":"civhmijuh0008bbh5st1yb05d","_id":"civhmijuj000ebbh5jocsgumc"},{"post_id":"civhmijue0005bbh503ku7pri","tag_id":"civhmijui000cbbh5p23e1ay7","_id":"civhmijuk000ibbh5mm32ssez"},{"post_id":"civhmijue0005bbh503ku7pri","tag_id":"civhmijuk000gbbh53w56cpus","_id":"civhmijul000kbbh5htlzgwmp"}],"Tag":[{"name":"Electron","_id":"civhmijud0004bbh5oatyvzg5"},{"name":"日记","_id":"civhmijuh0008bbh5st1yb05d"},{"name":"webSocket","_id":"civhmijui000cbbh5p23e1ay7"},{"name":"socket.io","_id":"civhmijuk000gbbh53w56cpus"}]}}