{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1479006470000},{"_id":"themes/maupassant/.DS_Store","hash":"61d4653525ee800306d888d998f91174144e6d64","modified":1479005479000},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1478920849000},{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1478920849000},{"_id":"themes/maupassant/README.md","hash":"75d8c42569809961953d1934de445418c00ab94c","modified":1478920849000},{"_id":"themes/maupassant/_config.yml","hash":"7f9abbd035a0c03435c9e89beaca912360cf1bca","modified":1498407853000},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1478920849000},{"_id":"source/_posts/electron-intr.md","hash":"13e9143e70cafce4f14278239fbbe29d04452a34","modified":1479004390000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1478924299000},{"_id":"source/_posts/hello-world.md","hash":"9c520a9edf71f58842239d7b391d3da62eca5304","modified":1479003621000},{"_id":"source/_posts/pomelo.md","hash":"837bafc1b0b256cb0d59ea547a1e7a7ec52b87e4","modified":1498407793000},{"_id":"source/_posts/electron-setup.md","hash":"552b34649c792e981bbd48190cecc25956d03242","modified":1479008157000},{"_id":"source/_posts/cat-fishing.md","hash":"311edaee8d20c1992fce6111ad0259e568e12d1e","modified":1482775050000},{"_id":"source/_posts/cocos-lua-debug.md","hash":"04abae3e4b8491fb4873126208b8a39fab8c6350","modified":1497668294000},{"_id":"source/_posts/qq-mirr.md","hash":"ce407ddaf4b7d5c3fa57a914e9df1cbb8b3e1111","modified":1497668294000},{"_id":"source/_posts/storage.md","hash":"5361d87aea2e4ca34796f272b030cbb2b964cfa4","modified":1497668294000},{"_id":"source/_posts/style.md","hash":"160a1023f27e54eeace877590aaf1c3b796e3838","modified":1478920849000},{"_id":"source/_posts/websocket.md","hash":"75d0e40619d904eaffbfc36c308a1a4621989165","modified":1482775050000},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1478920849000},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1478920849000},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1478920849000},{"_id":"themes/maupassant/languages/en.yml","hash":"e13ab1a2d2f1edbe67b4c035fd4667cb6a31db8e","modified":1478920849000},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"15e057ec4f23a49ed5b9ebf9b5ef6ad9a0a97a30","modified":1478920849000},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1478920849000},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1478920849000},{"_id":"themes/maupassant/layout/.DS_Store","hash":"c65c9d1aa3e98324aaca09da74ae56a88212485c","modified":1479003954000},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1479224741000},{"_id":"themes/maupassant/layout/base-without-sidebar.jade","hash":"1ad721de96784bf4253316b796db6200148d4152","modified":1478920849000},{"_id":"themes/maupassant/layout/base.jade","hash":"852c610ac392ef2fa130dbe73bcf4f96f423c869","modified":1478920849000},{"_id":"themes/maupassant/layout/index.jade","hash":"7466ce52023ed8a413a6b4461354a9e20e62fc14","modified":1478920849000},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1478920849000},{"_id":"themes/maupassant/layout/post.jade","hash":"9cf29fb0daed95935154ce0fa2b154df5a9b11b1","modified":1478920849000},{"_id":"themes/maupassant/layout/single-column.jade","hash":"c35fff4d9b331a41af5bc10f4278ec3d9da503db","modified":1478920849000},{"_id":"themes/maupassant/layout/timeline.jade","hash":"f03d8df63a188543cfe4e85e76194abe081411a1","modified":1478920849000},{"_id":"themes/maupassant/source/.DS_Store","hash":"882f64897d6dc7a26bcff05bae93530f7d21fb2c","modified":1479005495000},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"6c7f63ba04a4d28323ba31e79a4927f3d3fcc56e","modified":1478920849000},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"3dbcc9a9f0d6e55da191d3393c18bbfcfe99fa69","modified":1478920849000},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"709e7481766cf67d98786aa9cb31eb441622ef6b","modified":1479224862000},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1478920849000},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1478920849000},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1478920849000},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1478920849000},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1478920849000},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1478920849000},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1478920849000},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1478920849000},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1478920849000},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1478920849000},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1478920849000},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1478920849000},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1478920849000},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1478920849000},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1478920849000},{"_id":"themes/maupassant/source/css/style.scss","hash":"ef196d0b60bbcfa58c70ecd1141cb793d88705a2","modified":1479224862000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1478920849000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1478920849000},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1478920849000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1478920849000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1478920849000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1478920849000},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1478920849000},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1478920849000},{"_id":"themes/maupassant/source/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1478920849000},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1478920849000},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1478920849000},{"_id":"public/atom.xml","hash":"dfb6f4f69d2b9eedc990a1c1a98a0d1edbda4ebc","modified":1498408628859},{"_id":"public/2017/03/cocos-lua-debug/index.html","hash":"083c89942f625b7cc65a9da8474f61a3653390a8","modified":1498408628894},{"_id":"public/2017/02/storage/index.html","hash":"546459e76c3959853f9456238a980132902ce3e9","modified":1498408628895},{"_id":"public/2017/02/qq-mirr/index.html","hash":"40c2e66150ddfa6df5cfb1f7e5f5fea023cd322a","modified":1498408628895},{"_id":"public/2016/11/cat-fishing/index.html","hash":"f85850279557fe1f8f53399cc2ce64a1e72c0a5d","modified":1498408628896},{"_id":"public/2016/11/electron-setup/index.html","hash":"e965c55e53ae65d792b490d56cb433eabd12f72b","modified":1498408628896},{"_id":"public/2016/11/electron-intr/index.html","hash":"e1892651ac701cebc0cc27a4e369978f7a1de865","modified":1498408628896},{"_id":"public/2016/11/style/index.html","hash":"0d839c33332f9bdb3631a3d589f500cd33df112b","modified":1498408628896},{"_id":"public/2016/11/hello-world/index.html","hash":"69495a741b959a2b1cdba617e5a371a3f0f24567","modified":1498408628896},{"_id":"public/archives/index.html","hash":"c8182f8a4723da70a4be59888475cd25148f7ba8","modified":1498408628896},{"_id":"public/archives/2016/index.html","hash":"787fae04c68e24e602b14f5e7c10c19dc81fef33","modified":1498408628896},{"_id":"public/archives/2016/11/index.html","hash":"787fae04c68e24e602b14f5e7c10c19dc81fef33","modified":1498408628896},{"_id":"public/archives/2017/index.html","hash":"571741a84a362de2d20fc01c442e222c62d75b64","modified":1498408628896},{"_id":"public/archives/2017/02/index.html","hash":"1e3c06d204a2a0d51a2d5bfc5b5c640829139f6f","modified":1498408628896},{"_id":"public/archives/2017/03/index.html","hash":"5c2dbe6bfee98f45781c3aecb0c05d76de7a3889","modified":1498408628896},{"_id":"public/categories/Electron/index.html","hash":"a9970c291a1cfa38639ae047d82f2f60e5cb2458","modified":1498408628896},{"_id":"public/categories/随笔/index.html","hash":"8d5f2c4f4bbe73afb01f019b6f63454bce8d54ab","modified":1498408628896},{"_id":"public/categories/cocos2dx/index.html","hash":"bec4b39f44575c4d1d664be4ad802f4449418f87","modified":1498408628896},{"_id":"public/categories/Android/index.html","hash":"3208307e913b681151049d20847f95fdd287e08d","modified":1498408628897},{"_id":"public/categories/网络资源/index.html","hash":"83d2b0530903dfa0a423c843f96a28378cdc54c9","modified":1498408628897},{"_id":"public/categories/node-js/index.html","hash":"0c471e7f7015e58964d91d8507640b18eb14f2a5","modified":1498408628897},{"_id":"public/categories/node-js/webSocket/index.html","hash":"de3a455e4680966682bcb8a42db2def11cc0b0ec","modified":1498408628897},{"_id":"public/index.html","hash":"a4efca9104d06b08ec2b7819550787ce24edc20b","modified":1498408628897},{"_id":"public/tags/Electron/index.html","hash":"a9970c291a1cfa38639ae047d82f2f60e5cb2458","modified":1498408628898},{"_id":"public/tags/游戏人生/index.html","hash":"3c27edefd250bcb3340fc29f404c8fb46e5b90f0","modified":1498408628898},{"_id":"public/tags/cocos2dx-lua-debug-vscode/index.html","hash":"e5befd3bef092ea6e5edd426a34003fc8db5ff80","modified":1498408628898},{"_id":"public/tags/Android/index.html","hash":"3208307e913b681151049d20847f95fdd287e08d","modified":1498408628898},{"_id":"public/tags/网络资源/index.html","hash":"83d2b0530903dfa0a423c843f96a28378cdc54c9","modified":1498408628899},{"_id":"public/tags/日记/index.html","hash":"f69cf5988c3a3c39b91158aa8267bee8d787059f","modified":1498408628899},{"_id":"public/tags/webSocket/index.html","hash":"de3a455e4680966682bcb8a42db2def11cc0b0ec","modified":1498408628899},{"_id":"public/tags/socket-io/index.html","hash":"87663c817f158ab2f3be8a97682643aa735909b4","modified":1498408628899},{"_id":"public/2016/11/websocket/index.html","hash":"a043ad36fa56824e9413b4ad4289971c6480a2ed","modified":1498408628900},{"_id":"public/2017/06/pomelo/index.html","hash":"f87a6d0f19a58378b7d40f55d1bb1e2e8987441e","modified":1498408628904},{"_id":"public/archives/2017/06/index.html","hash":"4a0d20e5cd608639214383fa1c938253109a7186","modified":1498408628904},{"_id":"public/tags/nodejs/index.html","hash":"ef6cfe6ae2aca19a3d87ef4aa50d3165c5c3d8a5","modified":1498408628904}],"Category":[{"name":"Electron","_id":"cj4cx89460002mcbc5yw65xmj"},{"name":"随笔","_id":"cj4cx894j000dmcbc4y3s2ylk"},{"name":"cocos2dx","_id":"cj4cx894o000jmcbcy1d8dmcq"},{"name":"Android","_id":"cj4cx894p000nmcbcdoct0opc"},{"name":"网络资源","_id":"cj4cx894r000rmcbc1dccjgjc"},{"name":"node.js","_id":"cj4cx894u000vmcbcl39emkg6"},{"name":"webSocket","parent":"cj4cx894u000vmcbcl39emkg6","_id":"cj4cx894y0011mcbcfdxa7x4f"}],"Data":[],"Page":[],"Post":[{"title":"Electron 简介","date":"2016-11-12T04:10:20.000Z","_content":"\n[Electron](http://electron.atom.io/)是一个基于node.js的跨平台桌面应用组件（暂且称之为组件，对node.js只是初学，不知道标准的称呼是什么）。\n\n它最大的有点在于可以使用JavaScript 和 HTML来构建跨平台的桌面应用。\n\n我们常见的文本编辑器 atom，vscode和知名的游戏引擎cocos2dx推出的游戏编辑器cocos creator就是基于[Electron](http://electron.atom.io/)开发的。\n\n这直接降低了桌面应用开发的难度，并且兼容许多js版本的功能，尤其对于游戏开发，十分友好。\n\n由于近期工具开发的需要，接触了node.js开发，后续会有相关的学习笔记，来整理学习的过程。","source":"_posts/electron-intr.md","raw":"---\ntitle:  Electron 简介\ndate: 2016-11-12 12:10:20\ntags: Electron\ncategory: Electron\n---\n\n[Electron](http://electron.atom.io/)是一个基于node.js的跨平台桌面应用组件（暂且称之为组件，对node.js只是初学，不知道标准的称呼是什么）。\n\n它最大的有点在于可以使用JavaScript 和 HTML来构建跨平台的桌面应用。\n\n我们常见的文本编辑器 atom，vscode和知名的游戏引擎cocos2dx推出的游戏编辑器cocos creator就是基于[Electron](http://electron.atom.io/)开发的。\n\n这直接降低了桌面应用开发的难度，并且兼容许多js版本的功能，尤其对于游戏开发，十分友好。\n\n由于近期工具开发的需要，接触了node.js开发，后续会有相关的学习笔记，来整理学习的过程。","slug":"electron-intr","published":1,"updated":"2016-11-13T02:33:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cx893w0000mcbcf83dw8la","content":"<p><a href=\"http://electron.atom.io/\">Electron</a>是一个基于node.js的跨平台桌面应用组件（暂且称之为组件，对node.js只是初学，不知道标准的称呼是什么）。</p>\n<p>它最大的有点在于可以使用JavaScript 和 HTML来构建跨平台的桌面应用。</p>\n<p>我们常见的文本编辑器 atom，vscode和知名的游戏引擎cocos2dx推出的游戏编辑器cocos creator就是基于<a href=\"http://electron.atom.io/\">Electron</a>开发的。</p>\n<p>这直接降低了桌面应用开发的难度，并且兼容许多js版本的功能，尤其对于游戏开发，十分友好。</p>\n<p>由于近期工具开发的需要，接触了node.js开发，后续会有相关的学习笔记，来整理学习的过程。</p>\n","excerpt":"","more":"<p><a href=\"http://electron.atom.io/\">Electron</a>是一个基于node.js的跨平台桌面应用组件（暂且称之为组件，对node.js只是初学，不知道标准的称呼是什么）。</p>\n<p>它最大的有点在于可以使用JavaScript 和 HTML来构建跨平台的桌面应用。</p>\n<p>我们常见的文本编辑器 atom，vscode和知名的游戏引擎cocos2dx推出的游戏编辑器cocos creator就是基于<a href=\"http://electron.atom.io/\">Electron</a>开发的。</p>\n<p>这直接降低了桌面应用开发的难度，并且兼容许多js版本的功能，尤其对于游戏开发，十分友好。</p>\n<p>由于近期工具开发的需要，接触了node.js开发，后续会有相关的学习笔记，来整理学习的过程。</p>\n"},{"title":"第一篇文章","date":"2016-11-10T09:50:52.000Z","_content":"\n一直想坚持写博客，但是结果总是各种站点被关停，因此很久都没有好好写过博客。\n\n最近终于下定决心，在github上创建了自己的博客站点，以后会经常来更新点东西。权当自己的日常笔记。\n\n希望有兴趣的朋友来坐坐。\n","source":"_posts/hello-world.md","raw":"---\ntitle: 第一篇文章\ndate: 2016-11-10 17:50:52\n---\n\n一直想坚持写博客，但是结果总是各种站点被关停，因此很久都没有好好写过博客。\n\n最近终于下定决心，在github上创建了自己的博客站点，以后会经常来更新点东西。权当自己的日常笔记。\n\n希望有兴趣的朋友来坐坐。\n","slug":"hello-world","published":1,"updated":"2016-11-13T02:20:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cx89430001mcbcgarwo1hu","content":"<p>一直想坚持写博客，但是结果总是各种站点被关停，因此很久都没有好好写过博客。</p>\n<p>最近终于下定决心，在github上创建了自己的博客站点，以后会经常来更新点东西。权当自己的日常笔记。</p>\n<p>希望有兴趣的朋友来坐坐。</p>\n","excerpt":"","more":"<p>一直想坚持写博客，但是结果总是各种站点被关停，因此很久都没有好好写过博客。</p>\n<p>最近终于下定决心，在github上创建了自己的博客站点，以后会经常来更新点东西。权当自己的日常笔记。</p>\n<p>希望有兴趣的朋友来坐坐。</p>\n"},{"title":"Electron 安装","date":"2016-11-12T04:12:45.000Z","_content":"\n&nbsp;&nbsp;&nbsp;&nbsp;对于node.js的各种模块安装，最头疼的莫过于下载了。安装包体积巨大，GFW功能强大，服务器在国外，下载成功的几率很小。因此Electron的安装也是很麻烦的。\n\n### 解决方案：\n1、在安装步骤执行到 ` > node install.js ` 时，按ctrl+c中断过程\n2、阅读install.js的源代码\n3、找到使用本地缓存的逻辑\n4、手动下载zip文件，建立本地缓存，之后使用本地文件进行安装\n\n\n### 步骤：\n1、下载所需的zip包，我在mac环境下的下载路径是\n> [https://github.com/electron/electron/releases/download/v1.4.5/electron-v1.4.5-darwin-x64.zip](https://github.com/electron/electron/releases/download/v1.4.5/electron-v1.4.5-darwin-x64.zip)\n\n2、本地缓存目录为\n> ~/.electron/electron-v1.4.5-darwin-x64.zip\n\n3、手动下载的zip包放到缓存目录所在位置。\n\n4、重新执行 ` npm install -g electron ` 即可\n\n\n### 授人以渔\n上面的下载地址和缓存目录是通过阅读install.js脚本，尝试执行并打印部分变量得到的。\n对于很多其它的使用npm安装的功能模块，都可以通过这个方法，解决下载问题。","source":"_posts/electron-setup.md","raw":"---\ntitle: Electron 安装\ndate: 2016-11-12 12:12:45\ntags: Electron\ncategory: Electron\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp;对于node.js的各种模块安装，最头疼的莫过于下载了。安装包体积巨大，GFW功能强大，服务器在国外，下载成功的几率很小。因此Electron的安装也是很麻烦的。\n\n### 解决方案：\n1、在安装步骤执行到 ` > node install.js ` 时，按ctrl+c中断过程\n2、阅读install.js的源代码\n3、找到使用本地缓存的逻辑\n4、手动下载zip文件，建立本地缓存，之后使用本地文件进行安装\n\n\n### 步骤：\n1、下载所需的zip包，我在mac环境下的下载路径是\n> [https://github.com/electron/electron/releases/download/v1.4.5/electron-v1.4.5-darwin-x64.zip](https://github.com/electron/electron/releases/download/v1.4.5/electron-v1.4.5-darwin-x64.zip)\n\n2、本地缓存目录为\n> ~/.electron/electron-v1.4.5-darwin-x64.zip\n\n3、手动下载的zip包放到缓存目录所在位置。\n\n4、重新执行 ` npm install -g electron ` 即可\n\n\n### 授人以渔\n上面的下载地址和缓存目录是通过阅读install.js脚本，尝试执行并打印部分变量得到的。\n对于很多其它的使用npm安装的功能模块，都可以通过这个方法，解决下载问题。","slug":"electron-setup","published":1,"updated":"2016-11-13T03:35:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cx89490004mcbcajcxsong","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;对于node.js的各种模块安装，最头疼的莫过于下载了。安装包体积巨大，GFW功能强大，服务器在国外，下载成功的几率很小。因此Electron的安装也是很麻烦的。</p>\n<h3 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h3><p>1、在安装步骤执行到 <code>&gt; node install.js</code> 时，按ctrl+c中断过程<br>2、阅读install.js的源代码<br>3、找到使用本地缓存的逻辑<br>4、手动下载zip文件，建立本地缓存，之后使用本地文件进行安装</p>\n<h3 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h3><p>1、下载所需的zip包，我在mac环境下的下载路径是</p>\n<blockquote>\n<p><a href=\"https://github.com/electron/electron/releases/download/v1.4.5/electron-v1.4.5-darwin-x64.zip\">https://github.com/electron/electron/releases/download/v1.4.5/electron-v1.4.5-darwin-x64.zip</a></p>\n</blockquote>\n<p>2、本地缓存目录为</p>\n<blockquote>\n<p>~/.electron/electron-v1.4.5-darwin-x64.zip</p>\n</blockquote>\n<p>3、手动下载的zip包放到缓存目录所在位置。</p>\n<p>4、重新执行 <code>npm install -g electron</code> 即可</p>\n<h3 id=\"授人以渔\"><a href=\"#授人以渔\" class=\"headerlink\" title=\"授人以渔\"></a>授人以渔</h3><p>上面的下载地址和缓存目录是通过阅读install.js脚本，尝试执行并打印部分变量得到的。<br>对于很多其它的使用npm安装的功能模块，都可以通过这个方法，解决下载问题。</p>\n","excerpt":"","more":"<p>&nbsp;&nbsp;&nbsp;&nbsp;对于node.js的各种模块安装，最头疼的莫过于下载了。安装包体积巨大，GFW功能强大，服务器在国外，下载成功的几率很小。因此Electron的安装也是很麻烦的。</p>\n<h3 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h3><p>1、在安装步骤执行到 <code>&gt; node install.js</code> 时，按ctrl+c中断过程<br>2、阅读install.js的源代码<br>3、找到使用本地缓存的逻辑<br>4、手动下载zip文件，建立本地缓存，之后使用本地文件进行安装</p>\n<h3 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h3><p>1、下载所需的zip包，我在mac环境下的下载路径是</p>\n<blockquote>\n<p><a href=\"https://github.com/electron/electron/releases/download/v1.4.5/electron-v1.4.5-darwin-x64.zip\">https://github.com/electron/electron/releases/download/v1.4.5/electron-v1.4.5-darwin-x64.zip</a></p>\n</blockquote>\n<p>2、本地缓存目录为</p>\n<blockquote>\n<p>~/.electron/electron-v1.4.5-darwin-x64.zip</p>\n</blockquote>\n<p>3、手动下载的zip包放到缓存目录所在位置。</p>\n<p>4、重新执行 <code>npm install -g electron</code> 即可</p>\n<h3 id=\"授人以渔\"><a href=\"#授人以渔\" class=\"headerlink\" title=\"授人以渔\"></a>授人以渔</h3><p>上面的下载地址和缓存目录是通过阅读install.js脚本，尝试执行并打印部分变量得到的。<br>对于很多其它的使用npm安装的功能模块，都可以通过这个方法，解决下载问题。</p>\n"},{"title":"小猫钓鱼","date":"2016-11-28T02:32:00.000Z","_content":"\n有一天，猫妈妈带着小猫到河边去钓鱼。\n\n一只蜻蜓飞来了，这只蜻蜓可真漂亮呀，小猫越看越喜欢，于是放下鱼竿去捉蜻蜓。蜻蜓飞走了，小猫空手回到河边。一看，妈妈已经钓到了一条大鱼。 　　\n\n小猫想：我也要钓一条大鱼，就又拿起鱼竿钓鱼。\n\n不一会儿，一只蝴蝶飞来了，这只蝴蝶可真漂亮呀，小猫越看越喜欢，于是放下鱼竿，又去捉蝴蝶。蝴蝶没捉到，小猫又空着手回到河边。一看，妈妈又钓了一条大鱼。 　　\n\n小猫对妈妈说：“我怎么就钓不到鱼呢！”\n\n妈妈说：“钓鱼要一心一意，你一会儿捉蜻蜓，一会儿捉蝴蝶，当然钓不到鱼了。”\n\n小猫听了妈妈的话，一心一意地钓鱼，终于钓到了一条大鱼。\n\n其实这么简单的道理，却有很多人不动。做游戏不专心朝着一点做，非要左冲右突，结果最终什么都没做成。有些SB策划和产品完全意识不到这一点。\n正所谓 **不怕虎一样的对手，就怕猪一样的队友**。","source":"_posts/cat-fishing.md","raw":"---\ntitle: 小猫钓鱼\ndate: 2016-11-28 10:32:00\ntags: 游戏人生\ncategory: 随笔\n---\n\n有一天，猫妈妈带着小猫到河边去钓鱼。\n\n一只蜻蜓飞来了，这只蜻蜓可真漂亮呀，小猫越看越喜欢，于是放下鱼竿去捉蜻蜓。蜻蜓飞走了，小猫空手回到河边。一看，妈妈已经钓到了一条大鱼。 　　\n\n小猫想：我也要钓一条大鱼，就又拿起鱼竿钓鱼。\n\n不一会儿，一只蝴蝶飞来了，这只蝴蝶可真漂亮呀，小猫越看越喜欢，于是放下鱼竿，又去捉蝴蝶。蝴蝶没捉到，小猫又空着手回到河边。一看，妈妈又钓了一条大鱼。 　　\n\n小猫对妈妈说：“我怎么就钓不到鱼呢！”\n\n妈妈说：“钓鱼要一心一意，你一会儿捉蜻蜓，一会儿捉蝴蝶，当然钓不到鱼了。”\n\n小猫听了妈妈的话，一心一意地钓鱼，终于钓到了一条大鱼。\n\n其实这么简单的道理，却有很多人不动。做游戏不专心朝着一点做，非要左冲右突，结果最终什么都没做成。有些SB策划和产品完全意识不到这一点。\n正所谓 **不怕虎一样的对手，就怕猪一样的队友**。","slug":"cat-fishing","published":1,"updated":"2016-12-26T17:57:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cx894a0005mcbc5qg4toja","content":"<p>有一天，猫妈妈带着小猫到河边去钓鱼。</p>\n<p>一只蜻蜓飞来了，这只蜻蜓可真漂亮呀，小猫越看越喜欢，于是放下鱼竿去捉蜻蜓。蜻蜓飞走了，小猫空手回到河边。一看，妈妈已经钓到了一条大鱼。 　　</p>\n<p>小猫想：我也要钓一条大鱼，就又拿起鱼竿钓鱼。</p>\n<p>不一会儿，一只蝴蝶飞来了，这只蝴蝶可真漂亮呀，小猫越看越喜欢，于是放下鱼竿，又去捉蝴蝶。蝴蝶没捉到，小猫又空着手回到河边。一看，妈妈又钓了一条大鱼。 　　</p>\n<p>小猫对妈妈说：“我怎么就钓不到鱼呢！”</p>\n<p>妈妈说：“钓鱼要一心一意，你一会儿捉蜻蜓，一会儿捉蝴蝶，当然钓不到鱼了。”</p>\n<p>小猫听了妈妈的话，一心一意地钓鱼，终于钓到了一条大鱼。</p>\n<p>其实这么简单的道理，却有很多人不动。做游戏不专心朝着一点做，非要左冲右突，结果最终什么都没做成。有些SB策划和产品完全意识不到这一点。<br>正所谓 <strong>不怕虎一样的对手，就怕猪一样的队友</strong>。</p>\n","excerpt":"","more":"<p>有一天，猫妈妈带着小猫到河边去钓鱼。</p>\n<p>一只蜻蜓飞来了，这只蜻蜓可真漂亮呀，小猫越看越喜欢，于是放下鱼竿去捉蜻蜓。蜻蜓飞走了，小猫空手回到河边。一看，妈妈已经钓到了一条大鱼。 　　</p>\n<p>小猫想：我也要钓一条大鱼，就又拿起鱼竿钓鱼。</p>\n<p>不一会儿，一只蝴蝶飞来了，这只蝴蝶可真漂亮呀，小猫越看越喜欢，于是放下鱼竿，又去捉蝴蝶。蝴蝶没捉到，小猫又空着手回到河边。一看，妈妈又钓了一条大鱼。 　　</p>\n<p>小猫对妈妈说：“我怎么就钓不到鱼呢！”</p>\n<p>妈妈说：“钓鱼要一心一意，你一会儿捉蜻蜓，一会儿捉蝴蝶，当然钓不到鱼了。”</p>\n<p>小猫听了妈妈的话，一心一意地钓鱼，终于钓到了一条大鱼。</p>\n<p>其实这么简单的道理，却有很多人不动。做游戏不专心朝着一点做，非要左冲右突，结果最终什么都没做成。有些SB策划和产品完全意识不到这一点。<br>正所谓 <strong>不怕虎一样的对手，就怕猪一样的队友</strong>。</p>\n"},{"title":"在cocos2dx-lua中调试lua代码","date":"2017-03-08T03:09:29.000Z","_content":"\n\n\nlua是游戏开发中常用的脚本语言。本文主要讲述如何在vscode中搭建针对cocos2dx-lua的debug环境，以实现断点和单步调试。\n\n## 基础环境\n\n首先所需的基础环境包括:\nvscode \nnode.js\ncocos2dx-lua(我使用的是3.14.1版本，其他版本尚未测试,理论上2.x版本也可用)\n\n\n## lua调试环境搭建\n\n#### Step 1: 安装vscode扩展插件 `lua Debugger` \n\n![图1](/img/cocos_lua_debug/lua_0.png)\n\n之后按照配置说明，下载`vscode-debuggee.lua`并且复制到cocos2dx-lua的src目录下（目录随意，只要require的时候能够require到就可以），这里需要注意一下引入debuggee的代码，第一行的`local json = require 'dkjson'`不是必须的，这里只需要提供一个，包含 encode和decode方法的json包即可，可以用cjson也可以用cocos2dx-lua自带的json.lua，这个json工具是用来解析和发送调试指令的。\n\n\n#### Step 2: 配置Debug插件\n\n在debug面板增加调试配置，选择`Lua Debugger`，如图\n![](/img/cocos_lua_debug/lua_1.png)\n\n之后会打开配置选项\n![](/img/cocos_lua_debug/lua_2.png)\n我们用到的设置，只有最后一个`wait`的配置。这里需要重点关注`sourceBasePath`用来设置代码的根目录，当断点触发时，调试器会根据相对路径拼接上这个基础路径，来查找对应的lua代码，如果不设置正确，那么调试的时候将找不到对应的lua代码，导致调试器报错。\n\n#### Step 3: 引入调试插件\n\n设置好后，我们去修改cocos2dx-lua的代码，\n![](/img/cocos_lua_debug/lua_3.png)\n\n打开cocos2dx-lua的默认入口lua文件`controller.lua`，在这个文件的合适位置（合适位置的意思是，保证json是可用的，如果引入其他的json库，则不必将代码放在上图所示位置)加入启动调试器的代码。如果不是本机调试，还需要设置IP地址和相应的端口号。具体请参考`Lua Debugger`的配置帮助。\n\n#### Step 4： 开启调试之旅\n\n最后，随便找个文件，打一个断点（文中断点位置为AccelerometerTest.lua），然后启动调试器，会有下图所示提示。\n\n\n![](/img/cocos_lua_debug/lua_4.png)\n\n\n最后打开你的vs/xcode/android/ios 工程，运行（我这里是在windows下用vs运行了win32项目工程),启动后，等待连接界面消失，表示调试器已经成功连接。\n然后触发断点，断点成功，如图所示：\n\n![](/img/cocos_lua_debug/lua_5.png)\n\n左侧可以看到变量内容，右侧鼠标指向相应的变量，可以看到具体的变量信息。可以单步逐行执行代码。\n\n至此，cocos2dx-lua的调试环境搭建完成。\n\n\n\n\n## 写在最后\n\nvscode还是十分强大的，cocos2dx-js的调试环境搭建相对更加简单一些,后续会整理一篇搭建cocos2dx-js调试环境的文章。\n\n\n\n\n\n\n\n","source":"_posts/cocos-lua-debug.md","raw":"---\ntitle: 在cocos2dx-lua中调试lua代码\ndate: 2017-03-08 11:09:29\ntags: cocos2dx lua debug vscode\ncategory: cocos2dx\n---\n\n\n\nlua是游戏开发中常用的脚本语言。本文主要讲述如何在vscode中搭建针对cocos2dx-lua的debug环境，以实现断点和单步调试。\n\n## 基础环境\n\n首先所需的基础环境包括:\nvscode \nnode.js\ncocos2dx-lua(我使用的是3.14.1版本，其他版本尚未测试,理论上2.x版本也可用)\n\n\n## lua调试环境搭建\n\n#### Step 1: 安装vscode扩展插件 `lua Debugger` \n\n![图1](/img/cocos_lua_debug/lua_0.png)\n\n之后按照配置说明，下载`vscode-debuggee.lua`并且复制到cocos2dx-lua的src目录下（目录随意，只要require的时候能够require到就可以），这里需要注意一下引入debuggee的代码，第一行的`local json = require 'dkjson'`不是必须的，这里只需要提供一个，包含 encode和decode方法的json包即可，可以用cjson也可以用cocos2dx-lua自带的json.lua，这个json工具是用来解析和发送调试指令的。\n\n\n#### Step 2: 配置Debug插件\n\n在debug面板增加调试配置，选择`Lua Debugger`，如图\n![](/img/cocos_lua_debug/lua_1.png)\n\n之后会打开配置选项\n![](/img/cocos_lua_debug/lua_2.png)\n我们用到的设置，只有最后一个`wait`的配置。这里需要重点关注`sourceBasePath`用来设置代码的根目录，当断点触发时，调试器会根据相对路径拼接上这个基础路径，来查找对应的lua代码，如果不设置正确，那么调试的时候将找不到对应的lua代码，导致调试器报错。\n\n#### Step 3: 引入调试插件\n\n设置好后，我们去修改cocos2dx-lua的代码，\n![](/img/cocos_lua_debug/lua_3.png)\n\n打开cocos2dx-lua的默认入口lua文件`controller.lua`，在这个文件的合适位置（合适位置的意思是，保证json是可用的，如果引入其他的json库，则不必将代码放在上图所示位置)加入启动调试器的代码。如果不是本机调试，还需要设置IP地址和相应的端口号。具体请参考`Lua Debugger`的配置帮助。\n\n#### Step 4： 开启调试之旅\n\n最后，随便找个文件，打一个断点（文中断点位置为AccelerometerTest.lua），然后启动调试器，会有下图所示提示。\n\n\n![](/img/cocos_lua_debug/lua_4.png)\n\n\n最后打开你的vs/xcode/android/ios 工程，运行（我这里是在windows下用vs运行了win32项目工程),启动后，等待连接界面消失，表示调试器已经成功连接。\n然后触发断点，断点成功，如图所示：\n\n![](/img/cocos_lua_debug/lua_5.png)\n\n左侧可以看到变量内容，右侧鼠标指向相应的变量，可以看到具体的变量信息。可以单步逐行执行代码。\n\n至此，cocos2dx-lua的调试环境搭建完成。\n\n\n\n\n## 写在最后\n\nvscode还是十分强大的，cocos2dx-js的调试环境搭建相对更加简单一些,后续会整理一篇搭建cocos2dx-js调试环境的文章。\n\n\n\n\n\n\n\n","slug":"cocos-lua-debug","published":1,"updated":"2017-06-17T02:58:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cx894d0006mcbcfz93ung0","content":"<p>lua是游戏开发中常用的脚本语言。本文主要讲述如何在vscode中搭建针对cocos2dx-lua的debug环境，以实现断点和单步调试。</p>\n<h2 id=\"基础环境\"><a href=\"#基础环境\" class=\"headerlink\" title=\"基础环境\"></a>基础环境</h2><p>首先所需的基础环境包括:<br>vscode<br>node.js<br>cocos2dx-lua(我使用的是3.14.1版本，其他版本尚未测试,理论上2.x版本也可用)</p>\n<h2 id=\"lua调试环境搭建\"><a href=\"#lua调试环境搭建\" class=\"headerlink\" title=\"lua调试环境搭建\"></a>lua调试环境搭建</h2><h4 id=\"Step-1-安装vscode扩展插件-lua-Debugger\"><a href=\"#Step-1-安装vscode扩展插件-lua-Debugger\" class=\"headerlink\" title=\"Step 1: 安装vscode扩展插件 lua Debugger\"></a>Step 1: 安装vscode扩展插件 <code>lua Debugger</code></h4><p><img src=\"/img/cocos_lua_debug/lua_0.png\" alt=\"图1\"></p>\n<p>之后按照配置说明，下载<code>vscode-debuggee.lua</code>并且复制到cocos2dx-lua的src目录下（目录随意，只要require的时候能够require到就可以），这里需要注意一下引入debuggee的代码，第一行的<code>local json = require &#39;dkjson&#39;</code>不是必须的，这里只需要提供一个，包含 encode和decode方法的json包即可，可以用cjson也可以用cocos2dx-lua自带的json.lua，这个json工具是用来解析和发送调试指令的。</p>\n<h4 id=\"Step-2-配置Debug插件\"><a href=\"#Step-2-配置Debug插件\" class=\"headerlink\" title=\"Step 2: 配置Debug插件\"></a>Step 2: 配置Debug插件</h4><p>在debug面板增加调试配置，选择<code>Lua Debugger</code>，如图<br><img src=\"/img/cocos_lua_debug/lua_1.png\" alt=\"\"></p>\n<p>之后会打开配置选项<br><img src=\"/img/cocos_lua_debug/lua_2.png\" alt=\"\"><br>我们用到的设置，只有最后一个<code>wait</code>的配置。这里需要重点关注<code>sourceBasePath</code>用来设置代码的根目录，当断点触发时，调试器会根据相对路径拼接上这个基础路径，来查找对应的lua代码，如果不设置正确，那么调试的时候将找不到对应的lua代码，导致调试器报错。</p>\n<h4 id=\"Step-3-引入调试插件\"><a href=\"#Step-3-引入调试插件\" class=\"headerlink\" title=\"Step 3: 引入调试插件\"></a>Step 3: 引入调试插件</h4><p>设置好后，我们去修改cocos2dx-lua的代码，<br><img src=\"/img/cocos_lua_debug/lua_3.png\" alt=\"\"></p>\n<p>打开cocos2dx-lua的默认入口lua文件<code>controller.lua</code>，在这个文件的合适位置（合适位置的意思是，保证json是可用的，如果引入其他的json库，则不必将代码放在上图所示位置)加入启动调试器的代码。如果不是本机调试，还需要设置IP地址和相应的端口号。具体请参考<code>Lua Debugger</code>的配置帮助。</p>\n<h4 id=\"Step-4：-开启调试之旅\"><a href=\"#Step-4：-开启调试之旅\" class=\"headerlink\" title=\"Step 4： 开启调试之旅\"></a>Step 4： 开启调试之旅</h4><p>最后，随便找个文件，打一个断点（文中断点位置为AccelerometerTest.lua），然后启动调试器，会有下图所示提示。</p>\n<p><img src=\"/img/cocos_lua_debug/lua_4.png\" alt=\"\"></p>\n<p>最后打开你的vs/xcode/android/ios 工程，运行（我这里是在windows下用vs运行了win32项目工程),启动后，等待连接界面消失，表示调试器已经成功连接。<br>然后触发断点，断点成功，如图所示：</p>\n<p><img src=\"/img/cocos_lua_debug/lua_5.png\" alt=\"\"></p>\n<p>左侧可以看到变量内容，右侧鼠标指向相应的变量，可以看到具体的变量信息。可以单步逐行执行代码。</p>\n<p>至此，cocos2dx-lua的调试环境搭建完成。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>vscode还是十分强大的，cocos2dx-js的调试环境搭建相对更加简单一些,后续会整理一篇搭建cocos2dx-js调试环境的文章。</p>\n","excerpt":"","more":"<p>lua是游戏开发中常用的脚本语言。本文主要讲述如何在vscode中搭建针对cocos2dx-lua的debug环境，以实现断点和单步调试。</p>\n<h2 id=\"基础环境\"><a href=\"#基础环境\" class=\"headerlink\" title=\"基础环境\"></a>基础环境</h2><p>首先所需的基础环境包括:<br>vscode<br>node.js<br>cocos2dx-lua(我使用的是3.14.1版本，其他版本尚未测试,理论上2.x版本也可用)</p>\n<h2 id=\"lua调试环境搭建\"><a href=\"#lua调试环境搭建\" class=\"headerlink\" title=\"lua调试环境搭建\"></a>lua调试环境搭建</h2><h4 id=\"Step-1-安装vscode扩展插件-lua-Debugger\"><a href=\"#Step-1-安装vscode扩展插件-lua-Debugger\" class=\"headerlink\" title=\"Step 1: 安装vscode扩展插件 lua Debugger\"></a>Step 1: 安装vscode扩展插件 <code>lua Debugger</code></h4><p><img src=\"/img/cocos_lua_debug/lua_0.png\" alt=\"图1\"></p>\n<p>之后按照配置说明，下载<code>vscode-debuggee.lua</code>并且复制到cocos2dx-lua的src目录下（目录随意，只要require的时候能够require到就可以），这里需要注意一下引入debuggee的代码，第一行的<code>local json = require &#39;dkjson&#39;</code>不是必须的，这里只需要提供一个，包含 encode和decode方法的json包即可，可以用cjson也可以用cocos2dx-lua自带的json.lua，这个json工具是用来解析和发送调试指令的。</p>\n<h4 id=\"Step-2-配置Debug插件\"><a href=\"#Step-2-配置Debug插件\" class=\"headerlink\" title=\"Step 2: 配置Debug插件\"></a>Step 2: 配置Debug插件</h4><p>在debug面板增加调试配置，选择<code>Lua Debugger</code>，如图<br><img src=\"/img/cocos_lua_debug/lua_1.png\" alt=\"\"></p>\n<p>之后会打开配置选项<br><img src=\"/img/cocos_lua_debug/lua_2.png\" alt=\"\"><br>我们用到的设置，只有最后一个<code>wait</code>的配置。这里需要重点关注<code>sourceBasePath</code>用来设置代码的根目录，当断点触发时，调试器会根据相对路径拼接上这个基础路径，来查找对应的lua代码，如果不设置正确，那么调试的时候将找不到对应的lua代码，导致调试器报错。</p>\n<h4 id=\"Step-3-引入调试插件\"><a href=\"#Step-3-引入调试插件\" class=\"headerlink\" title=\"Step 3: 引入调试插件\"></a>Step 3: 引入调试插件</h4><p>设置好后，我们去修改cocos2dx-lua的代码，<br><img src=\"/img/cocos_lua_debug/lua_3.png\" alt=\"\"></p>\n<p>打开cocos2dx-lua的默认入口lua文件<code>controller.lua</code>，在这个文件的合适位置（合适位置的意思是，保证json是可用的，如果引入其他的json库，则不必将代码放在上图所示位置)加入启动调试器的代码。如果不是本机调试，还需要设置IP地址和相应的端口号。具体请参考<code>Lua Debugger</code>的配置帮助。</p>\n<h4 id=\"Step-4：-开启调试之旅\"><a href=\"#Step-4：-开启调试之旅\" class=\"headerlink\" title=\"Step 4： 开启调试之旅\"></a>Step 4： 开启调试之旅</h4><p>最后，随便找个文件，打一个断点（文中断点位置为AccelerometerTest.lua），然后启动调试器，会有下图所示提示。</p>\n<p><img src=\"/img/cocos_lua_debug/lua_4.png\" alt=\"\"></p>\n<p>最后打开你的vs/xcode/android/ios 工程，运行（我这里是在windows下用vs运行了win32项目工程),启动后，等待连接界面消失，表示调试器已经成功连接。<br>然后触发断点，断点成功，如图所示：</p>\n<p><img src=\"/img/cocos_lua_debug/lua_5.png\" alt=\"\"></p>\n<p>左侧可以看到变量内容，右侧鼠标指向相应的变量，可以看到具体的变量信息。可以单步逐行执行代码。</p>\n<p>至此，cocos2dx-lua的调试环境搭建完成。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>vscode还是十分强大的，cocos2dx-js的调试环境搭建相对更加简单一些,后续会整理一篇搭建cocos2dx-js调试环境的文章。</p>\n"},{"title":"AndoridSDK镜像地址","date":"2017-02-07T02:12:12.000Z","_content":"\n很多Android开发者都会面临GFW的封杀，我们也是各种见招拆招。\n昨天突然发现腾讯干了一件非常利国利民的事情，那就是提供了一个下载速度相当可观的镜像站点。\n\n站点地址:[http://android-mirror.bugly.qq.com:8080/](http://android-mirror.bugly.qq.com:8080/)\n\n这里有xcode，unity，adt，androidSDK，NDK，eclipse，JDK等资源提供下载，并且可以作为androidSDK的更新镜像使用，具体的使用方法也给出了详细的图文帮助\n\n[点击这里查看帮助](http://android-mirror.bugly.qq.com:8080/include/usage.html)\n\n\n希望对大家有所帮助\n\n\n","source":"_posts/qq-mirr.md","raw":"---\ntitle: AndoridSDK镜像地址\ndate: 2017-02-07 10:12:12\ntags: Android\ncategory: Android\n---\n\n很多Android开发者都会面临GFW的封杀，我们也是各种见招拆招。\n昨天突然发现腾讯干了一件非常利国利民的事情，那就是提供了一个下载速度相当可观的镜像站点。\n\n站点地址:[http://android-mirror.bugly.qq.com:8080/](http://android-mirror.bugly.qq.com:8080/)\n\n这里有xcode，unity，adt，androidSDK，NDK，eclipse，JDK等资源提供下载，并且可以作为androidSDK的更新镜像使用，具体的使用方法也给出了详细的图文帮助\n\n[点击这里查看帮助](http://android-mirror.bugly.qq.com:8080/include/usage.html)\n\n\n希望对大家有所帮助\n\n\n","slug":"qq-mirr","published":1,"updated":"2017-06-17T02:58:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cx894h000amcbchs2ebl1w","content":"<p>很多Android开发者都会面临GFW的封杀，我们也是各种见招拆招。<br>昨天突然发现腾讯干了一件非常利国利民的事情，那就是提供了一个下载速度相当可观的镜像站点。</p>\n<p>站点地址:<a href=\"http://android-mirror.bugly.qq.com:8080/\">http://android-mirror.bugly.qq.com:8080/</a></p>\n<p>这里有xcode，unity，adt，androidSDK，NDK，eclipse，JDK等资源提供下载，并且可以作为androidSDK的更新镜像使用，具体的使用方法也给出了详细的图文帮助</p>\n<p><a href=\"http://android-mirror.bugly.qq.com:8080/include/usage.html\">点击这里查看帮助</a></p>\n<p>希望对大家有所帮助</p>\n","excerpt":"","more":"<p>很多Android开发者都会面临GFW的封杀，我们也是各种见招拆招。<br>昨天突然发现腾讯干了一件非常利国利民的事情，那就是提供了一个下载速度相当可观的镜像站点。</p>\n<p>站点地址:<a href=\"http://android-mirror.bugly.qq.com:8080/\">http://android-mirror.bugly.qq.com:8080/</a></p>\n<p>这里有xcode，unity，adt，androidSDK，NDK，eclipse，JDK等资源提供下载，并且可以作为androidSDK的更新镜像使用，具体的使用方法也给出了详细的图文帮助</p>\n<p><a href=\"http://android-mirror.bugly.qq.com:8080/include/usage.html\">点击这里查看帮助</a></p>\n<p>希望对大家有所帮助</p>\n"},{"title":"网络API整理","date":"2017-02-07T03:19:36.000Z","_content":"\n收集整理了一些可能用到的网络API，便于编程时使用，适合没有自己的服务器的开发人员。\n\n1. 获取北京时间API\n` http://www.114time.com/api/clock.php `\n","source":"_posts/storage.md","raw":"---\ntitle: 网络API整理\ndate: 2017-02-07 11:19:36\ntags: 网络资源\ncategory: 网络资源\n---\n\n收集整理了一些可能用到的网络API，便于编程时使用，适合没有自己的服务器的开发人员。\n\n1. 获取北京时间API\n` http://www.114time.com/api/clock.php `\n","slug":"storage","published":1,"updated":"2017-06-17T02:58:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cx894i000cmcbc0vqbdysi","content":"<p>收集整理了一些可能用到的网络API，便于编程时使用，适合没有自己的服务器的开发人员。</p>\n<ol>\n<li>获取北京时间API<br><code>http://www.114time.com/api/clock.php</code></li>\n</ol>\n","excerpt":"","more":"<p>收集整理了一些可能用到的网络API，便于编程时使用，适合没有自己的服务器的开发人员。</p>\n<ol>\n<li>获取北京时间API<br><code>http://www.114time.com/api/clock.php</code></li>\n</ol>\n"},{"title":"风格修改","date":"2016-11-10T09:52:52.000Z","_content":"\n### 新的风格\n\n#### 修改了一次标题风格\n\n背景改为了黑色，与前景色互换了，这样更符合程序员的习惯，而且看多了，也不会觉得累。\n\n按照管理，应当有一些仪式性的东西。比如，helloworld\n\n```javaScript\ndocument.write(\"Hello Coldwinter's blog\");\n```\n\n```lua\nprint('Hello Coldwinter's blog')\n```\n\n```C++\nprintf(\"%s\",\"Hello Coldwinter's blog\");\n```\n\n```php\necho \"Hello Coldwinter's blog\";\n```\n\n\n> 各种代码的高亮\n\n1. 表格的支持\n2. 有序的\n\n* 无序的\n* 以及不知道是什么的","source":"_posts/style.md","raw":"---\ntitle: 风格修改\ndate: 2016-11-10 17:52:52\ntags: 日记\n---\n\n### 新的风格\n\n#### 修改了一次标题风格\n\n背景改为了黑色，与前景色互换了，这样更符合程序员的习惯，而且看多了，也不会觉得累。\n\n按照管理，应当有一些仪式性的东西。比如，helloworld\n\n```javaScript\ndocument.write(\"Hello Coldwinter's blog\");\n```\n\n```lua\nprint('Hello Coldwinter's blog')\n```\n\n```C++\nprintf(\"%s\",\"Hello Coldwinter's blog\");\n```\n\n```php\necho \"Hello Coldwinter's blog\";\n```\n\n\n> 各种代码的高亮\n\n1. 表格的支持\n2. 有序的\n\n* 无序的\n* 以及不知道是什么的","slug":"style","published":1,"updated":"2016-11-12T03:20:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cx894m000gmcbcuo95718s","content":"<h3 id=\"新的风格\"><a href=\"#新的风格\" class=\"headerlink\" title=\"新的风格\"></a>新的风格</h3><h4 id=\"修改了一次标题风格\"><a href=\"#修改了一次标题风格\" class=\"headerlink\" title=\"修改了一次标题风格\"></a>修改了一次标题风格</h4><p>背景改为了黑色，与前景色互换了，这样更符合程序员的习惯，而且看多了，也不会觉得累。</p>\n<p>按照管理，应当有一些仪式性的东西。比如，helloworld</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"Hello Coldwinter's blog\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">'Hello Coldwinter'</span>s blog<span class=\"string\">')</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,<span class=\"string\">\"Hello Coldwinter's blog\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Hello Coldwinter's blog\"</span>;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>各种代码的高亮</p>\n</blockquote>\n<ol>\n<li>表格的支持</li>\n<li>有序的</li>\n</ol>\n<ul>\n<li>无序的</li>\n<li>以及不知道是什么的</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"新的风格\"><a href=\"#新的风格\" class=\"headerlink\" title=\"新的风格\"></a>新的风格</h3><h4 id=\"修改了一次标题风格\"><a href=\"#修改了一次标题风格\" class=\"headerlink\" title=\"修改了一次标题风格\"></a>修改了一次标题风格</h4><p>背景改为了黑色，与前景色互换了，这样更符合程序员的习惯，而且看多了，也不会觉得累。</p>\n<p>按照管理，应当有一些仪式性的东西。比如，helloworld</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"Hello Coldwinter's blog\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">'Hello Coldwinter'</span>s blog<span class=\"string\">')</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,<span class=\"string\">\"Hello Coldwinter's blog\"</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Hello Coldwinter's blog\"</span>;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>各种代码的高亮</p>\n</blockquote>\n<ol>\n<li>表格的支持</li>\n<li>有序的</li>\n</ol>\n<ul>\n<li>无序的</li>\n<li>以及不知道是什么的</li>\n</ul>\n"},{"title":"Express + socket.io 聊天程序","date":"2016-11-17T05:44:59.000Z","_content":"\n\n### 基础环境\n\n\n1. 下载安装node.js(自行百度）\n2. 安装npm（自行百度）\n3. 创建工程目录 ` mkdir webSocket ` 并且切换到该目录\n4. 在webSocket下创建npm工程 ` npm init ` 按照提示完成\n5. 安装express ` npm install express ` (注意，此处非全局安装)\n6. 安装socket.io ` npm install socket.io ` (同上)\n7. 创建web目录www ` mkdir www `\n8. 创建js目录 ` mkdir www/js ` （这一步在本文内无用，是用来放客户端js代码的)\n9. 在js目录中安装socket.io.js,这个文件在 `node\\_modules/socket.io\\_client` 内\n10. 创建相应的 `index.js`、`www/index.html`文件\n\n\n### 详细说明\n\n#### 服务端\n\n先帖代码\n\n```javascript\nvar express = require('express');\nvar app = express();\nserver = app.listen(8000,function()\n{\n    console.log('服务器启动:http://localhost:8000');\n});\nio = require('socket.io').listen(server);\n\t\napp.use('/',express.static(__dirname + '/www'));\n\t\n//在线用户\nvar onlineUsers = {};\n//当前在线人数\nvar onlineCount = 0;\n\t\nio.on('connection', function(socket){\n\t\n\tconsole.log(socket.id);\n\tif(!onlineUsers.hasOwnProperty(socket.id)) {\n\t\tonlineUsers[socket.id] = socket;\n\t\t//在线人数+1\n\t\tonlineCount++;\n\t}\n\t\n\tsocket.emit('login',{user:socket.id, count:onlineCount});\n\t\n\tio.emit('enter', {count:onlineCount, user:socket.id});\n\tconsole.log('用户'+socket.id + \" 加入的房间，当前在线人数:\" + onlineCount);\n\t//监听用户退出\n\tsocket.on('disconnect', function()\n\t{\n\t\t//将退出的用户从在线列表中删除\n\t\tif(onlineUsers.hasOwnProperty(socket.id)) {\n\t\t\t//退出用户的信息\n\t\t\t//删除\n\t\t\tdelete onlineUsers[socket.id];\n\t\t\t//在线人数-1\n\t\t\tonlineCount--;\n\t\n\t\t\t//向所有客户端广播用户退出\n\t\t\tio.emit('logout', { count:onlineCount, user:socket.id});\n\t\t\t// console.log(socket.id+'退出了聊天室');\n\t\t}\n        console.log(socket.id +'退出了房间,当前房间人数:' + onlineCount);\n\t});\n\t\n\t//监听用户发布聊天内容\n\tsocket.on('msg', function(obj){\n\t\t//向所有客户端广播发布的消息\n\t\tio.emit('msg', {user:socket.id, msg:obj,count:onlineCount});\n\t\tconsole.log(socket.id+'说：'+obj);\n\t});\n});\n```\n\n\n##### 说明：\n\n不同于网上其它的例子，这里直接用express的对象启动监听，就可以返回一个server对象。\n如果希望监听在逻辑的最后执行，可以先执行创建server(`createServer`)，再监听。\n另外，选择8000端口，是因为，在mac下，访问80端口需要相应的权限，因此避免用此端口可以免去开发中的一些麻烦。等正式环境再做调整。\n\n\n\n#### 客户端\n\n客户端的代码结合的jquery来使用，我只帖重点部分。\n\n\n```javascript\n<body>\n    <script src=\"socket.io/socket.io.js\"></script>\n    <script src=\"js/jquery-3.1.1.min.js\"></script>\n    <script>\n\n\n    var user_id = '';\n\n\n    $(document).ready(function(){\n\n        var socket=io.connect();//与服务器进行连接\n\n        $(\"#send\").click(function(){\n            var data = $(\"#text\").val();\n            socket.emit('msg', data );\n            $(\"#msg\").val( $(\"#msg\").val() + \"\\n我:\" + data ); \n        })\n\n        socket.on('enter',function(data){\n            \n            $(\"#online\").val('当前在线人数:' + data.count);\n\n        });\n\n        socket.on('logout',function(data){\n            $(\"#online\").val('当前在线人数:' + data.count);\n        });\n\n        socket.on('login',function(data){\n            user_id = data.user;\n            $(\"#online\").val('当前在线人数:' + data.count);\n        });\n\n        socket.on('msg',function(data){\n            $(\"#online\").val('当前在线人数:' + data.count);\n            if(data.user == user_id) return;\n            $(\"#msg\").val( $(\"#msg\").val() + \"\\n\" + data.user +':'+data.msg);\n\n\n        })\n\n    })\n\n    </script>\n    ......\n```\n   \n##### 说明\n引入的js文件 `socket.io/socket.io.js` 这个是由服务器创建的访问，我们不必真的创建一个目录来存放一个真实的socket.io.js文件，当然，如果你的站点动静分离，或者有特别的需求，可以从网站下载相应的文件，放在相应的目录下提供访问，也是完全没有问题的。\n\n具体socket的绑定事件，可以从[socket.io官方](http://socket.io)的文档里找到相应的内容。\n\n\n### 写在最后\n\n本文只是为了贴一段代码，做一个备忘。这部分内容还会继续深入学习，这个笔记很持续更新一段时间，直到我搞清楚webSocket为止。\n\n下面附上我自己的各组件版本\n\n```\nnode.js    v6.9.1\nsocket.io  1.5.1\nsocket.io_client  1.4.5\nexpress    4.14.0\n\n```\n\n踩过此坑，特此记录","source":"_posts/websocket.md","raw":"---\ntitle: Express + socket.io 聊天程序\ndate: 2016-11-17 13:44:59\ntags: \n- webSocket\n- socket.io\ncategory: \n- node.js\n- webSocket\n---\n\n\n### 基础环境\n\n\n1. 下载安装node.js(自行百度）\n2. 安装npm（自行百度）\n3. 创建工程目录 ` mkdir webSocket ` 并且切换到该目录\n4. 在webSocket下创建npm工程 ` npm init ` 按照提示完成\n5. 安装express ` npm install express ` (注意，此处非全局安装)\n6. 安装socket.io ` npm install socket.io ` (同上)\n7. 创建web目录www ` mkdir www `\n8. 创建js目录 ` mkdir www/js ` （这一步在本文内无用，是用来放客户端js代码的)\n9. 在js目录中安装socket.io.js,这个文件在 `node\\_modules/socket.io\\_client` 内\n10. 创建相应的 `index.js`、`www/index.html`文件\n\n\n### 详细说明\n\n#### 服务端\n\n先帖代码\n\n```javascript\nvar express = require('express');\nvar app = express();\nserver = app.listen(8000,function()\n{\n    console.log('服务器启动:http://localhost:8000');\n});\nio = require('socket.io').listen(server);\n\t\napp.use('/',express.static(__dirname + '/www'));\n\t\n//在线用户\nvar onlineUsers = {};\n//当前在线人数\nvar onlineCount = 0;\n\t\nio.on('connection', function(socket){\n\t\n\tconsole.log(socket.id);\n\tif(!onlineUsers.hasOwnProperty(socket.id)) {\n\t\tonlineUsers[socket.id] = socket;\n\t\t//在线人数+1\n\t\tonlineCount++;\n\t}\n\t\n\tsocket.emit('login',{user:socket.id, count:onlineCount});\n\t\n\tio.emit('enter', {count:onlineCount, user:socket.id});\n\tconsole.log('用户'+socket.id + \" 加入的房间，当前在线人数:\" + onlineCount);\n\t//监听用户退出\n\tsocket.on('disconnect', function()\n\t{\n\t\t//将退出的用户从在线列表中删除\n\t\tif(onlineUsers.hasOwnProperty(socket.id)) {\n\t\t\t//退出用户的信息\n\t\t\t//删除\n\t\t\tdelete onlineUsers[socket.id];\n\t\t\t//在线人数-1\n\t\t\tonlineCount--;\n\t\n\t\t\t//向所有客户端广播用户退出\n\t\t\tio.emit('logout', { count:onlineCount, user:socket.id});\n\t\t\t// console.log(socket.id+'退出了聊天室');\n\t\t}\n        console.log(socket.id +'退出了房间,当前房间人数:' + onlineCount);\n\t});\n\t\n\t//监听用户发布聊天内容\n\tsocket.on('msg', function(obj){\n\t\t//向所有客户端广播发布的消息\n\t\tio.emit('msg', {user:socket.id, msg:obj,count:onlineCount});\n\t\tconsole.log(socket.id+'说：'+obj);\n\t});\n});\n```\n\n\n##### 说明：\n\n不同于网上其它的例子，这里直接用express的对象启动监听，就可以返回一个server对象。\n如果希望监听在逻辑的最后执行，可以先执行创建server(`createServer`)，再监听。\n另外，选择8000端口，是因为，在mac下，访问80端口需要相应的权限，因此避免用此端口可以免去开发中的一些麻烦。等正式环境再做调整。\n\n\n\n#### 客户端\n\n客户端的代码结合的jquery来使用，我只帖重点部分。\n\n\n```javascript\n<body>\n    <script src=\"socket.io/socket.io.js\"></script>\n    <script src=\"js/jquery-3.1.1.min.js\"></script>\n    <script>\n\n\n    var user_id = '';\n\n\n    $(document).ready(function(){\n\n        var socket=io.connect();//与服务器进行连接\n\n        $(\"#send\").click(function(){\n            var data = $(\"#text\").val();\n            socket.emit('msg', data );\n            $(\"#msg\").val( $(\"#msg\").val() + \"\\n我:\" + data ); \n        })\n\n        socket.on('enter',function(data){\n            \n            $(\"#online\").val('当前在线人数:' + data.count);\n\n        });\n\n        socket.on('logout',function(data){\n            $(\"#online\").val('当前在线人数:' + data.count);\n        });\n\n        socket.on('login',function(data){\n            user_id = data.user;\n            $(\"#online\").val('当前在线人数:' + data.count);\n        });\n\n        socket.on('msg',function(data){\n            $(\"#online\").val('当前在线人数:' + data.count);\n            if(data.user == user_id) return;\n            $(\"#msg\").val( $(\"#msg\").val() + \"\\n\" + data.user +':'+data.msg);\n\n\n        })\n\n    })\n\n    </script>\n    ......\n```\n   \n##### 说明\n引入的js文件 `socket.io/socket.io.js` 这个是由服务器创建的访问，我们不必真的创建一个目录来存放一个真实的socket.io.js文件，当然，如果你的站点动静分离，或者有特别的需求，可以从网站下载相应的文件，放在相应的目录下提供访问，也是完全没有问题的。\n\n具体socket的绑定事件，可以从[socket.io官方](http://socket.io)的文档里找到相应的内容。\n\n\n### 写在最后\n\n本文只是为了贴一段代码，做一个备忘。这部分内容还会继续深入学习，这个笔记很持续更新一段时间，直到我搞清楚webSocket为止。\n\n下面附上我自己的各组件版本\n\n```\nnode.js    v6.9.1\nsocket.io  1.5.1\nsocket.io_client  1.4.5\nexpress    4.14.0\n\n```\n\n踩过此坑，特此记录","slug":"websocket","published":1,"updated":"2016-12-26T17:57:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4cx894n000imcbcik6nru8d","content":"<h3 id=\"基础环境\"><a href=\"#基础环境\" class=\"headerlink\" title=\"基础环境\"></a>基础环境</h3><ol>\n<li>下载安装node.js(自行百度）</li>\n<li>安装npm（自行百度）</li>\n<li>创建工程目录 <code>mkdir webSocket</code> 并且切换到该目录</li>\n<li>在webSocket下创建npm工程 <code>npm init</code> 按照提示完成</li>\n<li>安装express <code>npm install express</code> (注意，此处非全局安装)</li>\n<li>安装socket.io <code>npm install socket.io</code> (同上)</li>\n<li>创建web目录www <code>mkdir www</code></li>\n<li>创建js目录 <code>mkdir www/js</code> （这一步在本文内无用，是用来放客户端js代码的)</li>\n<li>在js目录中安装socket.io.js,这个文件在 <code>node\\_modules/socket.io\\_client</code> 内</li>\n<li>创建相应的 <code>index.js</code>、<code>www/index.html</code>文件</li>\n</ol>\n<h3 id=\"详细说明\"><a href=\"#详细说明\" class=\"headerlink\" title=\"详细说明\"></a>详细说明</h3><h4 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h4><p>先帖代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">server = app.listen(<span class=\"number\">8000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器启动:http://localhost:8000'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">io = <span class=\"built_in\">require</span>(<span class=\"string\">'socket.io'</span>).listen(server);</div><div class=\"line\">\t</div><div class=\"line\">app.use(<span class=\"string\">'/'</span>,express.static(__dirname + <span class=\"string\">'/www'</span>));</div><div class=\"line\">\t</div><div class=\"line\"><span class=\"comment\">//在线用户</span></div><div class=\"line\"><span class=\"keyword\">var</span> onlineUsers = &#123;&#125;;</div><div class=\"line\"><span class=\"comment\">//当前在线人数</span></div><div class=\"line\"><span class=\"keyword\">var</span> onlineCount = <span class=\"number\">0</span>;</div><div class=\"line\">\t</div><div class=\"line\">io.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">socket</span>)</span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(socket.id);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!onlineUsers.hasOwnProperty(socket.id)) &#123;</div><div class=\"line\">\t\tonlineUsers[socket.id] = socket;</div><div class=\"line\">\t\t<span class=\"comment\">//在线人数+1</span></div><div class=\"line\">\t\tonlineCount++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tsocket.emit(<span class=\"string\">'login'</span>,&#123;<span class=\"attr\">user</span>:socket.id, <span class=\"attr\">count</span>:onlineCount&#125;);</div><div class=\"line\">\t</div><div class=\"line\">\tio.emit(<span class=\"string\">'enter'</span>, &#123;<span class=\"attr\">count</span>:onlineCount, <span class=\"attr\">user</span>:socket.id&#125;);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'用户'</span>+socket.id + <span class=\"string\">\" 加入的房间，当前在线人数:\"</span> + onlineCount);</div><div class=\"line\">\t<span class=\"comment\">//监听用户退出</span></div><div class=\"line\">\tsocket.on(<span class=\"string\">'disconnect'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</div><div class=\"line\">\t</span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//将退出的用户从在线列表中删除</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(onlineUsers.hasOwnProperty(socket.id)) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//退出用户的信息</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//删除</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">delete</span> onlineUsers[socket.id];</div><div class=\"line\">\t\t\t<span class=\"comment\">//在线人数-1</span></div><div class=\"line\">\t\t\tonlineCount--;</div><div class=\"line\">\t</div><div class=\"line\">\t\t\t<span class=\"comment\">//向所有客户端广播用户退出</span></div><div class=\"line\">\t\t\tio.emit(<span class=\"string\">'logout'</span>, &#123; <span class=\"attr\">count</span>:onlineCount, <span class=\"attr\">user</span>:socket.id&#125;);</div><div class=\"line\">\t\t\t<span class=\"comment\">// console.log(socket.id+'退出了聊天室');</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(socket.id +<span class=\"string\">'退出了房间,当前房间人数:'</span> + onlineCount);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//监听用户发布聊天内容</span></div><div class=\"line\">\tsocket.on(<span class=\"string\">'msg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//向所有客户端广播发布的消息</span></div><div class=\"line\">\t\tio.emit(<span class=\"string\">'msg'</span>, &#123;<span class=\"attr\">user</span>:socket.id, <span class=\"attr\">msg</span>:obj,<span class=\"attr\">count</span>:onlineCount&#125;);</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(socket.id+<span class=\"string\">'说：'</span>+obj);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><p>不同于网上其它的例子，这里直接用express的对象启动监听，就可以返回一个server对象。<br>如果希望监听在逻辑的最后执行，可以先执行创建server(<code>createServer</code>)，再监听。<br>另外，选择8000端口，是因为，在mac下，访问80端口需要相应的权限，因此避免用此端口可以免去开发中的一些麻烦。等正式环境再做调整。</p>\n<h4 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h4><p>客户端的代码结合的jquery来使用，我只帖重点部分。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;script src=\"socket.io/socket.io.js\"&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=\"js/jquery-3.1.1.min.js\"&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    var user_id = '';</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    $(document).ready(function()&#123;</div><div class=\"line\"></div><div class=\"line\">        var socket=io.connect();//与服务器进行连接</div><div class=\"line\"></div><div class=\"line\">        $(\"#send\").click(function()&#123;</div><div class=\"line\">            var data = $(\"#text\").val();</div><div class=\"line\">            socket.emit('msg', data );</div><div class=\"line\">            $(\"#msg\").val( $(\"#msg\").val() + \"\\n我:\" + data ); </div><div class=\"line\">        &#125;)</div><div class=\"line\"></div><div class=\"line\">        socket.on('enter',function(data)&#123;</div><div class=\"line\">            </div><div class=\"line\">            $(\"#online\").val('当前在线人数:' + data.count);</div><div class=\"line\"></div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        socket.on('logout',function(data)&#123;</div><div class=\"line\">            $(\"#online\").val('当前在线人数:' + data.count);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        socket.on('login',function(data)&#123;</div><div class=\"line\">            user_id = data.user;</div><div class=\"line\">            $(\"#online\").val('当前在线人数:' + data.count);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        socket.on('msg',function(data)&#123;</div><div class=\"line\">            $(\"#online\").val('当前在线人数:' + data.count);</div><div class=\"line\">            if(data.user == user_id) return;</div><div class=\"line\">            $(\"#msg\").val( $(\"#msg\").val() + \"\\n\" + data.user +':'+data.msg);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &#125;)</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\">    ......</div></pre></td></tr></table></figure>\n<h5 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h5><p>引入的js文件 <code>socket.io/socket.io.js</code> 这个是由服务器创建的访问，我们不必真的创建一个目录来存放一个真实的socket.io.js文件，当然，如果你的站点动静分离，或者有特别的需求，可以从网站下载相应的文件，放在相应的目录下提供访问，也是完全没有问题的。</p>\n<p>具体socket的绑定事件，可以从<a href=\"http://socket.io\">socket.io官方</a>的文档里找到相应的内容。</p>\n<h3 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h3><p>本文只是为了贴一段代码，做一个备忘。这部分内容还会继续深入学习，这个笔记很持续更新一段时间，直到我搞清楚webSocket为止。</p>\n<p>下面附上我自己的各组件版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">node.js    v6.9.1</div><div class=\"line\">socket.io  1.5.1</div><div class=\"line\">socket.io_client  1.4.5</div><div class=\"line\">express    4.14.0</div></pre></td></tr></table></figure>\n<p>踩过此坑，特此记录</p>\n","excerpt":"","more":"<h3 id=\"基础环境\"><a href=\"#基础环境\" class=\"headerlink\" title=\"基础环境\"></a>基础环境</h3><ol>\n<li>下载安装node.js(自行百度）</li>\n<li>安装npm（自行百度）</li>\n<li>创建工程目录 <code>mkdir webSocket</code> 并且切换到该目录</li>\n<li>在webSocket下创建npm工程 <code>npm init</code> 按照提示完成</li>\n<li>安装express <code>npm install express</code> (注意，此处非全局安装)</li>\n<li>安装socket.io <code>npm install socket.io</code> (同上)</li>\n<li>创建web目录www <code>mkdir www</code></li>\n<li>创建js目录 <code>mkdir www/js</code> （这一步在本文内无用，是用来放客户端js代码的)</li>\n<li>在js目录中安装socket.io.js,这个文件在 <code>node\\_modules/socket.io\\_client</code> 内</li>\n<li>创建相应的 <code>index.js</code>、<code>www/index.html</code>文件</li>\n</ol>\n<h3 id=\"详细说明\"><a href=\"#详细说明\" class=\"headerlink\" title=\"详细说明\"></a>详细说明</h3><h4 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h4><p>先帖代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">server = app.listen(<span class=\"number\">8000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器启动:http://localhost:8000'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">io = <span class=\"built_in\">require</span>(<span class=\"string\">'socket.io'</span>).listen(server);</div><div class=\"line\">\t</div><div class=\"line\">app.use(<span class=\"string\">'/'</span>,express.static(__dirname + <span class=\"string\">'/www'</span>));</div><div class=\"line\">\t</div><div class=\"line\"><span class=\"comment\">//在线用户</span></div><div class=\"line\"><span class=\"keyword\">var</span> onlineUsers = &#123;&#125;;</div><div class=\"line\"><span class=\"comment\">//当前在线人数</span></div><div class=\"line\"><span class=\"keyword\">var</span> onlineCount = <span class=\"number\">0</span>;</div><div class=\"line\">\t</div><div class=\"line\">io.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">socket</span>)</span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(socket.id);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!onlineUsers.hasOwnProperty(socket.id)) &#123;</div><div class=\"line\">\t\tonlineUsers[socket.id] = socket;</div><div class=\"line\">\t\t<span class=\"comment\">//在线人数+1</span></div><div class=\"line\">\t\tonlineCount++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tsocket.emit(<span class=\"string\">'login'</span>,&#123;<span class=\"attr\">user</span>:socket.id, <span class=\"attr\">count</span>:onlineCount&#125;);</div><div class=\"line\">\t</div><div class=\"line\">\tio.emit(<span class=\"string\">'enter'</span>, &#123;<span class=\"attr\">count</span>:onlineCount, <span class=\"attr\">user</span>:socket.id&#125;);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'用户'</span>+socket.id + <span class=\"string\">\" 加入的房间，当前在线人数:\"</span> + onlineCount);</div><div class=\"line\">\t<span class=\"comment\">//监听用户退出</span></div><div class=\"line\">\tsocket.on(<span class=\"string\">'disconnect'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</div><div class=\"line\">\t</span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//将退出的用户从在线列表中删除</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(onlineUsers.hasOwnProperty(socket.id)) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//退出用户的信息</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//删除</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">delete</span> onlineUsers[socket.id];</div><div class=\"line\">\t\t\t<span class=\"comment\">//在线人数-1</span></div><div class=\"line\">\t\t\tonlineCount--;</div><div class=\"line\">\t</div><div class=\"line\">\t\t\t<span class=\"comment\">//向所有客户端广播用户退出</span></div><div class=\"line\">\t\t\tio.emit(<span class=\"string\">'logout'</span>, &#123; <span class=\"attr\">count</span>:onlineCount, <span class=\"attr\">user</span>:socket.id&#125;);</div><div class=\"line\">\t\t\t<span class=\"comment\">// console.log(socket.id+'退出了聊天室');</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(socket.id +<span class=\"string\">'退出了房间,当前房间人数:'</span> + onlineCount);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//监听用户发布聊天内容</span></div><div class=\"line\">\tsocket.on(<span class=\"string\">'msg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//向所有客户端广播发布的消息</span></div><div class=\"line\">\t\tio.emit(<span class=\"string\">'msg'</span>, &#123;<span class=\"attr\">user</span>:socket.id, <span class=\"attr\">msg</span>:obj,<span class=\"attr\">count</span>:onlineCount&#125;);</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(socket.id+<span class=\"string\">'说：'</span>+obj);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><p>不同于网上其它的例子，这里直接用express的对象启动监听，就可以返回一个server对象。<br>如果希望监听在逻辑的最后执行，可以先执行创建server(<code>createServer</code>)，再监听。<br>另外，选择8000端口，是因为，在mac下，访问80端口需要相应的权限，因此避免用此端口可以免去开发中的一些麻烦。等正式环境再做调整。</p>\n<h4 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h4><p>客户端的代码结合的jquery来使用，我只帖重点部分。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;script src=\"socket.io/socket.io.js\"&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=\"js/jquery-3.1.1.min.js\"&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    var user_id = '';</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    $(document).ready(function()&#123;</div><div class=\"line\"></div><div class=\"line\">        var socket=io.connect();//与服务器进行连接</div><div class=\"line\"></div><div class=\"line\">        $(\"#send\").click(function()&#123;</div><div class=\"line\">            var data = $(\"#text\").val();</div><div class=\"line\">            socket.emit('msg', data );</div><div class=\"line\">            $(\"#msg\").val( $(\"#msg\").val() + \"\\n我:\" + data ); </div><div class=\"line\">        &#125;)</div><div class=\"line\"></div><div class=\"line\">        socket.on('enter',function(data)&#123;</div><div class=\"line\">            </div><div class=\"line\">            $(\"#online\").val('当前在线人数:' + data.count);</div><div class=\"line\"></div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        socket.on('logout',function(data)&#123;</div><div class=\"line\">            $(\"#online\").val('当前在线人数:' + data.count);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        socket.on('login',function(data)&#123;</div><div class=\"line\">            user_id = data.user;</div><div class=\"line\">            $(\"#online\").val('当前在线人数:' + data.count);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        socket.on('msg',function(data)&#123;</div><div class=\"line\">            $(\"#online\").val('当前在线人数:' + data.count);</div><div class=\"line\">            if(data.user == user_id) return;</div><div class=\"line\">            $(\"#msg\").val( $(\"#msg\").val() + \"\\n\" + data.user +':'+data.msg);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &#125;)</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\">    ......</div></pre></td></tr></table></figure>\n<h5 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h5><p>引入的js文件 <code>socket.io/socket.io.js</code> 这个是由服务器创建的访问，我们不必真的创建一个目录来存放一个真实的socket.io.js文件，当然，如果你的站点动静分离，或者有特别的需求，可以从网站下载相应的文件，放在相应的目录下提供访问，也是完全没有问题的。</p>\n<p>具体socket的绑定事件，可以从<a href=\"http://socket.io\">socket.io官方</a>的文档里找到相应的内容。</p>\n<h3 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h3><p>本文只是为了贴一段代码，做一个备忘。这部分内容还会继续深入学习，这个笔记很持续更新一段时间，直到我搞清楚webSocket为止。</p>\n<p>下面附上我自己的各组件版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">node.js    v6.9.1</div><div class=\"line\">socket.io  1.5.1</div><div class=\"line\">socket.io_client  1.4.5</div><div class=\"line\">express    4.14.0</div></pre></td></tr></table></figure>\n<p>踩过此坑，特此记录</p>\n"},{"title":"pomelo简介","date":"2017-06-25T16:15:44.000Z","_content":"\n### pomelo简介\n\npomelo 是网易推出的一个基于nodejs的服务端框架，主要用于游戏服务器端的开发。\n\n这个框架又很多值得学习的地方，包括负载均衡，通信，架构，逻辑调度等等，总之一句话，当今游戏服务器所需的特性在这个框架里都能够有所体现。\n\n但是要想用它做企业开发，还是需要费一番功夫的。毕竟框架还是比较简陋，很多地方不是足够的方便。\n\n近期在研究nodejs相关的桌面及服务器相关的逻辑。也许会有一些踩坑的笔记留下来。\n\n有兴趣的童鞋可以关注一下。\n\n","source":"_posts/pomelo.md","raw":"---\ntitle: pomelo简介\ndate: 2017-06-26 00:15:44\ntags: nodejs\ncategory: node.js\n---\n\n### pomelo简介\n\npomelo 是网易推出的一个基于nodejs的服务端框架，主要用于游戏服务器端的开发。\n\n这个框架又很多值得学习的地方，包括负载均衡，通信，架构，逻辑调度等等，总之一句话，当今游戏服务器所需的特性在这个框架里都能够有所体现。\n\n但是要想用它做企业开发，还是需要费一番功夫的。毕竟框架还是比较简陋，很多地方不是足够的方便。\n\n近期在研究nodejs相关的桌面及服务器相关的逻辑。也许会有一些踩坑的笔记留下来。\n\n有兴趣的童鞋可以关注一下。\n\n","slug":"pomelo","published":1,"updated":"2017-06-25T16:23:13.000Z","_id":"cj4cxb9lm0000mwbcglg9byeh","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"pomelo简介\"><a href=\"#pomelo简介\" class=\"headerlink\" title=\"pomelo简介\"></a>pomelo简介</h3><p>pomelo 是网易推出的一个基于nodejs的服务端框架，主要用于游戏服务器端的开发。</p>\n<p>这个框架又很多值得学习的地方，包括负载均衡，通信，架构，逻辑调度等等，总之一句话，当今游戏服务器所需的特性在这个框架里都能够有所体现。</p>\n<p>但是要想用它做企业开发，还是需要费一番功夫的。毕竟框架还是比较简陋，很多地方不是足够的方便。</p>\n<p>近期在研究nodejs相关的桌面及服务器相关的逻辑。也许会有一些踩坑的笔记留下来。</p>\n<p>有兴趣的童鞋可以关注一下。</p>\n","excerpt":"","more":"<h3 id=\"pomelo简介\"><a href=\"#pomelo简介\" class=\"headerlink\" title=\"pomelo简介\"></a>pomelo简介</h3><p>pomelo 是网易推出的一个基于nodejs的服务端框架，主要用于游戏服务器端的开发。</p>\n<p>这个框架又很多值得学习的地方，包括负载均衡，通信，架构，逻辑调度等等，总之一句话，当今游戏服务器所需的特性在这个框架里都能够有所体现。</p>\n<p>但是要想用它做企业开发，还是需要费一番功夫的。毕竟框架还是比较简陋，很多地方不是足够的方便。</p>\n<p>近期在研究nodejs相关的桌面及服务器相关的逻辑。也许会有一些踩坑的笔记留下来。</p>\n<p>有兴趣的童鞋可以关注一下。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj4cx893w0000mcbcf83dw8la","category_id":"cj4cx89460002mcbc5yw65xmj","_id":"cj4cx894i000bmcbcqxptp52b"},{"post_id":"cj4cx89490004mcbcajcxsong","category_id":"cj4cx89460002mcbc5yw65xmj","_id":"cj4cx894n000hmcbckg28tuwc"},{"post_id":"cj4cx894a0005mcbc5qg4toja","category_id":"cj4cx894j000dmcbc4y3s2ylk","_id":"cj4cx894p000mmcbckq3f5qhl"},{"post_id":"cj4cx894d0006mcbcfz93ung0","category_id":"cj4cx894o000jmcbcy1d8dmcq","_id":"cj4cx894q000qmcbca6wixmwn"},{"post_id":"cj4cx894h000amcbchs2ebl1w","category_id":"cj4cx894p000nmcbcdoct0opc","_id":"cj4cx894u000umcbc241ilzut"},{"post_id":"cj4cx894i000cmcbc0vqbdysi","category_id":"cj4cx894r000rmcbc1dccjgjc","_id":"cj4cx894v000ymcbcfjdt35au"},{"post_id":"cj4cx894n000imcbcik6nru8d","category_id":"cj4cx894u000vmcbcl39emkg6","_id":"cj4cx894z0013mcbcst51mn6r"},{"post_id":"cj4cx894n000imcbcik6nru8d","category_id":"cj4cx894y0011mcbcfdxa7x4f","_id":"cj4cx894z0015mcbcx9jm6pqm"},{"post_id":"cj4cxb9lm0000mwbcglg9byeh","category_id":"cj4cx894u000vmcbcl39emkg6","_id":"cj4cxb9lt0002mwbcxopylqoy"}],"PostTag":[{"post_id":"cj4cx893w0000mcbcf83dw8la","tag_id":"cj4cx89480003mcbcsxx2ryq1","_id":"cj4cx894h0009mcbcp6w5sezl"},{"post_id":"cj4cx89490004mcbcajcxsong","tag_id":"cj4cx89480003mcbcsxx2ryq1","_id":"cj4cx894l000fmcbcw1xlrpf5"},{"post_id":"cj4cx894a0005mcbc5qg4toja","tag_id":"cj4cx894k000emcbc9jklgpju","_id":"cj4cx894p000lmcbcurr10kqw"},{"post_id":"cj4cx894d0006mcbcfz93ung0","tag_id":"cj4cx894o000kmcbc3lltneb3","_id":"cj4cx894q000pmcbc8t3bzydd"},{"post_id":"cj4cx894h000amcbchs2ebl1w","tag_id":"cj4cx894p000omcbco3381416","_id":"cj4cx894s000tmcbcj5kpfp0o"},{"post_id":"cj4cx894i000cmcbc0vqbdysi","tag_id":"cj4cx894r000smcbc8g7pwcde","_id":"cj4cx894u000xmcbcwdk04uea"},{"post_id":"cj4cx894m000gmcbcuo95718s","tag_id":"cj4cx894u000wmcbc9ofj572n","_id":"cj4cx894y0010mcbclilf6hn5"},{"post_id":"cj4cx894n000imcbcik6nru8d","tag_id":"cj4cx894w000zmcbcbkbxizps","_id":"cj4cx894z0014mcbcgwlzc1ft"},{"post_id":"cj4cx894n000imcbcik6nru8d","tag_id":"cj4cx894y0012mcbc6q2nrkcr","_id":"cj4cx894z0016mcbczrh0n26h"},{"post_id":"cj4cxb9lm0000mwbcglg9byeh","tag_id":"cj4cxb9ls0001mwbcynnb15t0","_id":"cj4cxb9lt0003mwbc7q6wuvbn"}],"Tag":[{"name":"Electron","_id":"cj4cx89480003mcbcsxx2ryq1"},{"name":"游戏人生","_id":"cj4cx894k000emcbc9jklgpju"},{"name":"cocos2dx lua debug vscode","_id":"cj4cx894o000kmcbc3lltneb3"},{"name":"Android","_id":"cj4cx894p000omcbco3381416"},{"name":"网络资源","_id":"cj4cx894r000smcbc8g7pwcde"},{"name":"日记","_id":"cj4cx894u000wmcbc9ofj572n"},{"name":"webSocket","_id":"cj4cx894w000zmcbcbkbxizps"},{"name":"socket.io","_id":"cj4cx894y0012mcbc6q2nrkcr"},{"name":"nodejs","_id":"cj4cxb9ls0001mwbcynnb15t0"}]}}